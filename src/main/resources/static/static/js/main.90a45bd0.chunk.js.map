{"version":3,"sources":["components/NavigationItem.js","apiCalls/apiCalls.js","store/actionsTypes.js","store/authActions.js","components/Navigation.js","components/Footer.js","components/Layout.js","components/Jumbotron.js","components/ThemesCard.js","pages/HomePage.js","components/ButtonWithProgress.js","components/Input.js","pages/LoginPage.js","pages/SignupPage.js","store/authReducer.js","store/store.js","shared/failureHandler.js","pages/ProfilePage.js","components/Spinner.js","pages/CreateInstitutionPage.js","shared/sharedConstants.js","pages/UpdateInstitutionPage.js","pages/MyInstitutionPage.js","pages/AddLanguagesPage.js","pages/AddExhibitPage.js","components/MyExhibitCard.js","pages/MyInstitutionExhibitsPage.js","pages/UpdateExhibitPage.js","components/InstitutionCard.js","pages/TranslateInstitutionsPage.js","components/TranslateExhibitCard.js","pages/TranslateExhibitPage.js","pages/NewTranslationPage.js","components/TranslatorRateTranslationCard.js","pages/TranslatorRatePage.js","components/ApproveExhibitCard.js","pages/ApproveExhibitPage.js","components/OwnerRateTranslationCard.js","pages/OwnerRatePage.js","components/MyTranslationSequenceCard.js","pages/MyTranslationsPage.js","components/MyTranslationCard.js","pages/TranslationSequencePage.js","components/UserManagerRow.js","pages/UserManagerPage.js","pages/UserDetailPage.js","App.js","index.js"],"names":["navigationItem","props","className","exact","activeClassName","to","children","setAuthorizationHeader","token","isLoggedIn","axios","defaults","headers","common","updateUser","user","put","updatePassword","password","saveMyInstitution","institution","post","updateInstitutionImage","img","updateInstitution","addInstitutionLanguage","languageId","addExhibit","exhibit","deleteExhibit","exhibitId","delete","updateExhibitImage","updateExhibitInfoLabelImage","updateExhibit","addInstitutionManager","email","deleteInstitution","saveNewTranslation","translation","getRateOverview","get","setLike","translationId","value","setOfficial","deleteSequence","rollbackTranslation","adminUpdateUsername","userId","username","adminChangePassword","adminChangeTranslator","adminChangeBan","adminRemoveInstitution","getQRCode","LOGOUT_SUCCESS","LOGIN_SUCCESS","SET_USERNAME","SET_EMAIL","SET_IS_INSTITUTION_OWNER","login","credentials","dispatch","apiCalls","then","response","loginSuccess","data","decodedToken","jwt_decode","id","createdAt","isTranslator","isInstitutionOwner","isAdmin","expiredAt","exp","type","actionsTypes","payload","getFreshToken","signup","logout","setIsInstitutionOwner","Navigation","this","NavigationItem","role","href","onClick","e","preventDefault","Component","connect","state","authActions","Footer","layout","jumbotron","themesCard","title","info","home","Jumbotron","ThemesCard","ButtonWithProgress","disabled","pendingApiCall","hasChildren","text","Input","inputClassName","undefined","hasError","label","boldLabel","name","onChange","accept","onlyImage","htmlFor","placeholder","error","LoginPage","apiError","event","setState","target","onClickLogin","body","history","push","catch","disabledSubmit","SignupPage","passwordRepeat","errors","passwordRepeatConfirmed","onClickSignup","validationErrors","initialState","authReducer","action","actions","localStorageData","localStorage","getItem","initState","persistedState","validToken","JSON","parse","currentTime","Date","now","console","log","store","reactReduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","middleware","thunk","navigator","userAgent","includes","createStore","compose","applyMiddleware","subscribe","getState","setItem","stringify","setTimeout","handleError","Promise","resolve","reject","status","ProfilePage","pendingApiCallUpdateUser","pendingApiCallUpdatePassword","userUpdated","passwordUpdated","handleApiError","apiCall","onClickUserUpdate","setUsername","setEmail","onClickPasswordUpdate","toLocaleDateString","Spinner","CreateInstitutionPage","address","latitudeString","longitudeString","encodedImage","imageSelect","onImageSelect","files","length","file","reader","FileReader","onloadend","result","readAsDataURL","clearImage","onClickCreate","redirect","src","alt","INSTITUTIONS_IMAGES_URL","EXHIBITS_IMAGES_URL","INFO_LABELS_IMAGES_URL","UpdateInstitutionPage","latitude","longitude","image","pendingApiCallUpdateInstitution","pendingApiCallUpdateImage","pendingApiCallDeleteInstitution","pendingApiCallAddManager","institutionUpdated","imageUpdated","managerAdded","onClickImageUpdate","message","onEmailChange","onClickInstitutionUpdate","onClickInstitutionDelete","confirm","onClickManagerAdd","Link","MyInstitutionPage","isOwner","path","AddLanguagesPage","pendingApiCallDownloadLanguages","possible","chosen","filtered","search","onSearchChange","filter","lan","toLowerCase","onLanguageAddClick","newFiltered","fil","newPossible","pos","newChosen","possibleLanguages","chosenLanguages","map","AddExhibitPage","infoLabelText","building","room","showcase","encodedInfoLabel","infoLabelSelect","created","onInfoLabelTextChange","editor","getData","ClassicEditor","MyExhibitCard","onClickDownloadQRCode","onClickDelete","MyInstitutionExhibitsPage","exhibits","newExhibits","ex","a","document","createElement","download","click","content","UpdateExhibitPage","infoLabel","pendingApiCallGetInstitution","pendingApiCallUpdateInfoLabel","exhibitUpdated","infoLabelUpdated","encoded","updated","encode","select","onClickInfoImageUpdate","onClickExhibitUpdate","match","params","InstitutinCard","institutionId","TranslateInstitutionsPage","institutions","i","InstitutionCard","TranslateExhibitCard","selectLang","languages","lang","buttonsDisabled","TranslateExhibitPage","unshift","NewTranslationPage","exhibitName","languageName","pendingApiCallGetNewTranslation","pendingApiCallCreateTranslation","onTranslationCreate","onTextChange","TranslatorRateTranslationCard","cardStyle","isOfficial","btnClass","liked","authorUsername","translatedText","likesCount","onLikeChange","TranslatorRatePage","language","translations","newValue","newTranslations","t","ApproveExhibitCard","buttonDisabled","ApproveExhibitPage","OwnerRateTranslationCard","likeBtnClass","officialBtnClass","onOfficialChange","pendingApiCallSetOfficial","OwnerRatePage","MyTranslationSequenceCard","exhibitImage","institutionName","latestTranslationCreatedAt","MyTranslationsPage","sequences","newSequences","s","index","MyTranslationCard","order","onRollback","TranslationSequencePage","slice","translationsLength","UserManagerRow","UserManagerPage","users","u","scope","UserDetailPage","isBanned","pendingApiCallUsernameUpdate","pendingApiCallChangePassword","pendingApiCallTranslator","pendingApiCallBan","pendingApiCallRemoveInstitution","usernameUpdated","onClickUsernameUpdate","onPasswordChange","onTranslatorChange","onBanChange","onInstitutionRemove","App","routes","component","HomePage","Layout","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.90a45bd0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n/**\r\n * component represents one navigation item\r\n * @param props props\r\n */\r\nconst navigationItem = (props) => (\r\n    <li className=\"nav-item\">\r\n        <NavLink exact activeClassName='active' className=\"nav-link\" to={props.to}>\r\n            {props.children}\r\n        </NavLink>\r\n    </li>\r\n);\r\n\r\nexport default navigationItem;","import axios from \"axios\";\r\n\r\n/**\r\n * Sets authorization jwt\r\n * @param token jwt\r\n * @param isLoggedIn whether user is logged in\r\n */\r\nexport const setAuthorizationHeader = ({token, isLoggedIn}) => {\r\n    if(isLoggedIn) {\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    } else {\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n}\r\n\r\n/**\r\n * Logs user in\r\n * @param credentials password and username\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const login = credentials => {\r\n    return axios.post(\"/users/login\", credentials);\r\n}\r\n\r\n/**\r\n * Registers new user\r\n * @param user user info\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const signup = user => {\r\n    return axios.post(\"/users/register\", user);\r\n}\r\n\r\n/**\r\n * Gets fresh jwt\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getFreshToken = () => {\r\n    return axios.get(\"/users/token\");\r\n}\r\n\r\n/**\r\n * Updates user info\r\n * @param user user info\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const updateUser = user => {\r\n    return axios.put(\"/users/updateUser\", user);\r\n}\r\n\r\n/**\r\n * Updates users password\r\n * @param password password\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const updatePassword = password => {\r\n    return axios.put(\"/users/updatePassword\", password);\r\n}\r\n\r\n/**\r\n * Gets info of user's institution\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getMyInstitution = () => {\r\n    return axios.get(\"/institutions/myInstitution\");\r\n}\r\n\r\n/**\r\n * Saves new user's institution\r\n * @param institution institution\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const saveMyInstitution = institution => {\r\n    return axios.post(\"/institutions/myInstitution\", institution);\r\n}\r\n\r\n/**\r\n * Updates institution image\r\n * @param img image base64 encoded\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const updateInstitutionImage = img => {\r\n    return axios.put(\"/institutions/myInstitution/updateImage\", img);\r\n}\r\n\r\n/**\r\n * Updates institution info\r\n * @param institution updated institution\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const updateInstitution = institution => {\r\n    return axios.put(\"/institutions/myInstitution\", institution);\r\n}\r\n\r\n/**\r\n * Gets all languages of user's institution\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getMyInstitutionLanguages = () => {\r\n    return axios.get(\"/institutions/myInstitution/languages\");\r\n}\r\n\r\n/**\r\n * Adds new language to user's institution\r\n * @param languageId language id\r\n * @returns {Promise<AxiosResponse<any>>} reponse\r\n */\r\nexport const addInstitutionLanguage = languageId => {\r\n    return axios.post(\"/institutions/myInstitution/languages/\" + languageId);\r\n}\r\n\r\n/**\r\n * Adds new exhibit to institution\r\n * @param exhibit new exhibit\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const addExhibit = exhibit => {\r\n    return axios.post(\"/exhibits\", exhibit);\r\n}\r\n\r\n/**\r\n * Gets all exhibits of user's institution\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getAllExhibitsOfMyInstitution = () => {\r\n    return axios.get(\"/exhibits/all\");\r\n}\r\n\r\n/**\r\n * Deletes exhibit from user's institution\r\n * @param exhibitId exhibit id\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const deleteExhibit = exhibitId => {\r\n    return axios.delete(\"/exhibits/\" + exhibitId);\r\n}\r\n\r\n/**\r\n * Gets exhibit based on its id\r\n * @param exhibitId exhibit id\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getExhibit = exhibitId => {\r\n    return axios.get(\"/exhibits/\" + exhibitId);\r\n}\r\n\r\n/**\r\n * Updates exhibit image\r\n * @param exhibitId exhibit id\r\n * @param img base64 encoded image\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const updateExhibitImage = (exhibitId, img) => {\r\n    return axios.put(\"/exhibits/\" + exhibitId + \"/updateImage\", img);\r\n}\r\n\r\n/**\r\n * Updates exhibit info label\r\n * @param exhibitId exhibit id\r\n * @param img base64 encoded info label image\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const updateExhibitInfoLabelImage = (exhibitId, img) => {\r\n    return axios.put(\"/exhibits/\" + exhibitId + \"/updateInfoLabel\", img);\r\n}\r\n\r\n/**\r\n * Updates exhibit information\r\n * @param exhibitId exhibit id\r\n * @param exhibit updated exhibit\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const updateExhibit = (exhibitId, exhibit) => {\r\n    return axios.put(\"/exhibits/\" + exhibitId, exhibit);\r\n}\r\n\r\n/**\r\n * Adds manager to institution\r\n * @param email new manager's email\r\n * @returns {Promise<AxiosResponse<ny>>} response\r\n */\r\nexport const addInstitutionManager = email => {\r\n    return axios.post(\"/institutions/myInstitution/addManager\", email);\r\n}\r\n\r\n/**\r\n * Deletes institution\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const deleteInstitution = () => {\r\n    return axios.delete(\"/institutions/myInstitution\");\r\n}\r\n\r\n/**\r\n * Gets all registered institutions\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getAllInstitutions = () => {\r\n    return axios.get(\"/institutions\");\r\n}\r\n\r\n/**\r\n * Gets all exhibits and allowed languages of an institution\r\n * @param institutionId institution id\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getExhibitsTranslate = institutionId => {\r\n    return axios.get(\"/exhibits/translate/\" + institutionId);\r\n}\r\n\r\n/**\r\n * Gets info for creating new translation\r\n * @param exhibitId exhibit id\r\n * @param languageId language id\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getNewTranslation = (exhibitId, languageId) => {\r\n    return axios.get(\"/translations/new/\" + exhibitId + \"/\" + languageId);\r\n}\r\n\r\n/**\r\n * Saves new translation\r\n * @param exhibitId exhibit id\r\n * @param languageId language id\r\n * @param translation translation id\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const saveNewTranslation = (exhibitId, languageId, translation) => {\r\n    return axios.post(\"/translations/new/\" + exhibitId + \"/\" + languageId, translation);\r\n}\r\n\r\n/**\r\n * Gets translations of given exhibit and language for rating\r\n * @param exhibitId exhibit id\r\n * @param languageId language id\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getRateOverview = (exhibitId, languageId) => {\r\n    return axios.get(\"/translations/rate/\" + exhibitId + \"/\" + languageId);\r\n}\r\n\r\n/**\r\n * Sets like/unlike to given translation\r\n * @param translationId translation id\r\n * @param value new like value\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const setLike = (translationId, value) => {\r\n    return axios.put(\"/translations/like/\" + translationId, value);\r\n}\r\n\r\n/**\r\n * Gets all exhibits and allowed languages to user's instituion\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getExhibitsApproveTranslations = () => {\r\n    return axios.get(\"/exhibits/approveTranslations\");\r\n}\r\n\r\n/**\r\n * Sets translation official/unofficial\r\n * @param translationId translation id\r\n * @param value new official value\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const setOfficial = (translationId, value) => {\r\n    return axios.put(\"/translations/official/\" + translationId, value);\r\n}\r\n\r\n/**\r\n * Gets translator's translation sequences\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getMyTranslationSequences = () => {\r\n    return axios.get(\"/translations/sequences\");\r\n}\r\n\r\n/**\r\n * Deletes translation sequence\r\n * @param exhibitId exhibit id\r\n * @param languageId language id\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const deleteSequence = (exhibitId, languageId) => {\r\n    return axios.delete(\"/translations/sequences/\" + exhibitId + \"/\" + languageId);\r\n}\r\n\r\n/**\r\n * Gets translation of translation sequence\r\n * @param exhibitId exhibit id\r\n * @param languageId language id\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getMyTranslationSequence = (exhibitId, languageId) => {\r\n    return axios.get(\"/translations/sequence/\" + exhibitId + \"/\" + languageId);\r\n}\r\n\r\n/**\r\n * Rollbacks translation sequence to given translation\r\n * @param translationId translation id\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const rollbackTranslation = translationId => {\r\n    return axios.delete(\"/translations/sequence/\" + translationId);\r\n}\r\n\r\n/**\r\n * Gets all system users\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getUsers = () => {\r\n    return axios.get(\"/admin/users\");\r\n}\r\n\r\n/**\r\n * Gets users details\r\n * @param userId user id\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getUser = userId => {\r\n    return axios.get(\"/admin/users/\" + userId);\r\n}\r\n\r\n/**\r\n * Updates username of user\r\n * @param userId user id\r\n * @param username new username\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const adminUpdateUsername = (userId, username) => {\r\n    return axios.put(\"/admin/users/\" + userId + \"/updateUsername\", username);\r\n}\r\n\r\n/**\r\n * Changes password of given user by sending it to his email\r\n * @param userId user id\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const adminChangePassword = userId => {\r\n    return axios.put(\"/admin/users/\" + userId + \"/updatePassword\");\r\n}\r\n\r\n/**\r\n * Changes user's rights to translate\r\n * @param userId user id\r\n * @param value new rights value\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const adminChangeTranslator = (userId, value) => {\r\n    return axios.put(\"/admin/users/\" + userId + \"/updateTranslator\", value);\r\n}\r\n\r\n/**\r\n * Changes user's rights to log into the system and perform actions\r\n * @param userId user id\r\n * @param value new ban value\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const adminChangeBan = (userId, value) => {\r\n    return axios.put(\"/admin/users/\" + userId + \"/updateBan\", value);\r\n}\r\n\r\n/**\r\n * Removes institution from user\r\n * @param userId user ud\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const adminRemoveInstitution = userId => {\r\n    return axios.put(\"/admin/users/\" + userId + \"/removeInstitution\");\r\n}\r\n\r\n/**\r\n * Gets QR code for given exhibit\r\n * @param exhibitId exhibit id\r\n * @returns {Promise<AxiosResponse<any>>} response\r\n */\r\nexport const getQRCode = exhibitId => {\r\n    return axios.get(\"/exhibits/\" + exhibitId + \"/qrcode\");\r\n}","/**\r\n * logout action\r\n */\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\n/**\r\n * login action\r\n */\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\n/**\r\n * set username action\r\n */\r\nexport const SET_USERNAME = \"SET_USERNAME\";\r\n/**\r\n * set email action\r\n */\r\nexport const SET_EMAIL = \"SET_EMAIL\";\r\n/**\r\n * set if is institution owner action\r\n */\r\nexport const SET_IS_INSTITUTION_OWNER = \"SET_IS_INSTITUTION_OWNER\";\r\n","import * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport * as actionsTypes from \"./actionsTypes\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n/**\r\n * logs user in\r\n * @param credentials login credentials\r\n */\r\nexport const login = (credentials) => {\r\n    return dispatch => {\r\n        return apiCalls.login(credentials).then(response => {\r\n            // when login is successful parse token and log in\r\n            dispatch(loginSuccess(response.data.token));\r\n            return response;\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * logs user in based on information encoded in token\r\n * @param token jwt\r\n */\r\nconst loginSuccess = (token) => {\r\n    // decode jwt\r\n    const decodedToken = jwt_decode(token);\r\n\r\n    const user = {\r\n        id: decodedToken.id,\r\n        username: decodedToken.username,\r\n        email: decodedToken.email,\r\n        createdAt: decodedToken.createdAt,\r\n        isTranslator: decodedToken.isTranslator,\r\n        isInstitutionOwner: decodedToken.isInstitutionOwner,\r\n        isAdmin: decodedToken.isAdmin,\r\n        isLoggedIn: true,\r\n        token: token,\r\n        expiredAt: decodedToken.exp,\r\n    }\r\n\r\n    // return user\r\n    return {\r\n        type: actionsTypes.LOGIN_SUCCESS,\r\n        payload: user,\r\n    };\r\n}\r\n\r\n/**\r\n * gets fresh token from server\r\n */\r\nexport const getFreshToken = () => {\r\n    return dispatch => {\r\n        apiCalls.getFreshToken().then(response => {\r\n            // if fresh token acquire si successful set new token to redux\r\n            dispatch(loginSuccess(response.data.token));\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * registers new user in the system\r\n * @param user new user\r\n */\r\nexport const signup = (user) => {\r\n    return dispatch => {\r\n        return apiCalls.signup(user).then(response => {\r\n            const credentials = {\r\n                username: user.username,\r\n                password: user.password\r\n            }\r\n            // logs user in after successful sign up\r\n            return dispatch(login(credentials));\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * logs user out\r\n */\r\nexport const logout = () => {\r\n    return {\r\n        type: actionsTypes.LOGOUT_SUCCESS\r\n    }\r\n}\r\n\r\n/**\r\n * set username to redux state\r\n * @param username username\r\n */\r\nexport const setUsername = (username) => {\r\n    return {\r\n        type: actionsTypes.SET_USERNAME,\r\n        payload: username,\r\n    }\r\n}\r\n\r\n/**\r\n * set email to redux state\r\n * @param email email\r\n */\r\nexport const setEmail = (email) => {\r\n    return {\r\n        type: actionsTypes.SET_EMAIL,\r\n        payload: email,\r\n    }\r\n}\r\n\r\n/**\r\n * set if user is institution owner to redux state\r\n * @param value if user is institution owner\r\n */\r\nexport const setIsInstitutionOwner = (value) => {\r\n    return {\r\n        type: actionsTypes.SET_IS_INSTITUTION_OWNER,\r\n        payload: value,\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Link, NavLink} from \"react-router-dom\";\r\nimport NavigationItem from \"../components/NavigationItem\";\r\nimport {connect} from \"react-redux\";\r\nimport * as authActions from \"../store/authActions\";\r\n\r\n/**\r\n * web navigation\r\n */\r\nclass Navigation extends Component {\r\n\r\n    // renders navigation in the top of webpage\r\n    render() {\r\n        const {user} = this.props;\r\n\r\n        // render navigation\r\n        return (\r\n            <div className=\"position-fixed w-100 fixed-header\">\r\n                <nav className=\"blue-nav navbar navbar-expand-lg navbar-light\" id=\"blue-nav\">\r\n                    <div className=\"container\">\r\n                        <Link className=\"navbar-brand\" to=\"/\">CTS</Link>\r\n                        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                                data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\r\n                                aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                            <span className=\"navbar-toggler-icon\"/>\r\n                        </button>\r\n\r\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                            <ul className=\"navbar-nav ml-auto d-flex align-items-center\">\r\n                                <NavigationItem to=\"/\">Home</NavigationItem>\r\n                                {user.isAdmin && <NavigationItem to=\"/users\">Users</NavigationItem>}\r\n                                {user.isTranslator && <NavigationItem to=\"/institutions\">Translate</NavigationItem>}\r\n                                {user.isInstitutionOwner && <NavigationItem to=\"/approve\">Approve</NavigationItem>}\r\n                                {\r\n                                    user.isLoggedIn ?\r\n                                        <li className=\"nav-item dropdown\">\r\n                                            <a className=\"nav-link\" id=\"navbarDropdown\" role=\"button\" href=\"/#\"\r\n                                               data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                {user.username + \" \"}\r\n                                                <i className=\"fa fa-user\" aria-hidden=\"true\"/>\r\n                                            </a>\r\n\r\n                                            <div className=\"my-dropdown dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                                                {\r\n                                                    user.isTranslator &&\r\n                                                    <NavLink className=\"dropdown-item\" to=\"/myTranslations\">\r\n                                                        <i className=\"fa fa-globe\" /> My Translations\r\n                                                    </NavLink>\r\n                                                }\r\n                                                <NavLink className=\"dropdown-item\" to=\"/myInstitution\">\r\n                                                    <i className=\"fa fa-home\" /> My Institution\r\n                                                </NavLink>\r\n                                                <NavLink className=\"dropdown-item\" to=\"/profile\">\r\n                                                    <i className=\"fa fa-user\" /> My Profile\r\n                                                </NavLink>\r\n                                                <div className=\"dropdown-divider\"/>\r\n                                                <a onClick={(e) => {e.preventDefault(); this.props.logout();}} href=\"/#\" className=\"dropdown-item\" id=\"logout\">\r\n                                                    <i className=\"fa fa-sign-out\" /> Logout\r\n                                                </a>\r\n                                            </div>\r\n                                        </li>\r\n                                        :\r\n                                        <>\r\n                                            <NavigationItem to=\"/signup\">Signup</NavigationItem>\r\n                                            <NavigationItem to=\"/login\">Login</NavigationItem>\r\n                                        </>\r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * maps redux state to props\r\n * @param state redux state\r\n */\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state,\r\n    };\r\n}\r\n\r\n/**\r\n * maps redux dispatch to props\r\n * @param dispatch redux dispatch\r\n */\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        logout: () => dispatch(authActions.logout()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);","import React from 'react';\r\n\r\n/**\r\n * web footer with information\r\n * @param props props\r\n */\r\nfunction Footer(props) {\r\n    return (\r\n        <footer className=\"position-fixed d-flex justify-content-center align-items-center w-100\">\r\n            Community Translation System ©Pavel Čácha\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport Navigation from \"./Navigation\"\r\nimport Footer from \"./Footer\"\r\n\r\n/**\r\n * web layout\r\n * @param props props\r\n */\r\nconst layout = (props) => (\r\n    <>\r\n        <Navigation />\r\n        {props.children}\r\n        <Footer />\r\n    </>\r\n);\r\n\r\nexport default layout;","import React from \"react\";\r\n\r\n/**\r\n * homepage jumbotron\r\n * @param props props\r\n */\r\nconst jumbotron = (props) => (\r\n    <div className=\"intro\">\r\n        <div className=\"jumbotron jumbotron-fluid bg-transparent\">\r\n            <div className=\"container\">\r\n                <div className=\"blurred-black p-3 rounded-lg\">\r\n                    <h1 className=\"display-4 font-weight-bold\">The System for Community Translation of Information Texts</h1>\r\n                    <p className=\"lead font-weight-bold\">The place where you can show your skill while helping cultural institutions to grow</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default jumbotron;","import React from \"react\";\r\n\r\n/**\r\n * card with web info showed on home page\r\n * @param props props\r\n */\r\nconst themesCard = (props) => (\r\n    <div className=\"col mt-2\">\r\n        <div className={\"my-card border rounded\"}>\r\n            <h3>{props.title}</h3>\r\n            <p>{props.info}</p>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default themesCard;","import React from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport ThemesCard from \"../components/ThemesCard\";\r\n\r\n/**\r\n * home page definition\r\n * @param props page props\r\n * @returns {JSX.Element} home page\r\n */\r\nconst home = (props) => (\r\n    <div className=\"bg-white\">\r\n        <Jumbotron/>\r\n\r\n        <div className=\"container mt-5 pb-5\">\r\n            <div className=\"row\">\r\n                <div className=\"col d-flex justify-content-center align-items-center flex-column\">\r\n                    <h3>Our goals</h3>\r\n                    <p>The site is intended for anyone who wants to participate in community translation of information texts of cultural institutions</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row mt-3 bottom-padding\">\r\n                <ThemesCard title=\"Become a Translator\" info=\"Join the community of translators and start translating today!\"/>\r\n\r\n                <ThemesCard title=\"Register Your Institution\"\r\n                            info=\"Register your institution and let the community translate your chosen information texts!\"/>\r\n\r\n                <ThemesCard title=\"Mobile Application\"\r\n                            info=\"Visitors to your cultural institution will be able to find the translated texts in our mobile application!\"/>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default home;","import React from \"react\";\r\n\r\n/**\r\n * button with progress spinner\r\n * @param props props\r\n */\r\nconst ButtonWithProgress = (props) => {\r\n    return (\r\n        <button disabled={props.disabled}\r\n                className={props.className || \"btn btn-primary\"} onClick={props.onClick}>\r\n\r\n            {\r\n                props.pendingApiCall &&\r\n                <div className=\"spinner-border\r\n                text-light spinner-border-sm mr-1\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            }\r\n\r\n            {\r\n                props.hasChildren ?\r\n                    props.children\r\n                    :\r\n                    props.text\r\n            }\r\n\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ButtonWithProgress;","import React from \"react\";\r\n\r\n/**\r\n * generic input used in forms\r\n * @param props props\r\n */\r\nconst Input = (props) => {\r\n    let inputClassName = \"form-control\";\r\n\r\n    if(props.type === \"file\") {\r\n        inputClassName += \" custom-file-input\";\r\n    }\r\n\r\n    if(props.hasError !== undefined) {\r\n        inputClassName += props.hasError ? \" is-invalid\" : \" is-valid\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.label &&\r\n                <label className={props.boldLabel && \"font-weight-bold\"}>{props.label}</label>\r\n            }\r\n\r\n            {\r\n                props.type === \"file\" ?\r\n                    <div className=\"custom-file\">\r\n                        <input type=\"file\" className={inputClassName} id=\"institutionImageFile\" name={props.name} value={props.value} onChange={props.onChange}\r\n                            accept= {props.onlyImage && \".jpg, .png, .jpeg\"} />\r\n                        <label className=\"custom-file-label\" htmlFor=\"institutionImageFile\">{props.placeholder}</label>\r\n                    </div>\r\n                    :\r\n                    <input className={inputClassName} type={props.type || \"text\"} name={props.name}\r\n                           placeholder={props.placeholder} value={props.value} onChange={props.onChange} />\r\n            }\r\n\r\n            {\r\n                props.hasError &&\r\n                <div className=\"text-danger\">\r\n                    <small>{props.error}</small>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Input;","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport ButtonWithProgress from \"../components/ButtonWithProgress\";\r\nimport * as authActions from \"../store/authActions\";\r\nimport Input from \"../components/Input\";\r\n\r\n/**\r\n * page for logging in to the system\r\n */\r\nclass LoginPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        username: \"\",\r\n        password: \"\",\r\n        apiError: {},\r\n        pendingApiCall: false\r\n    }\r\n\r\n    /**\r\n     * called on input text change\r\n     * @param event input event\r\n     */\r\n    onChange = (event) => {\r\n        // update new value in state\r\n        this.setState({[event.target.name]: event.target.value, apiError: {}});\r\n    }\r\n\r\n    /**\r\n     * called when user submit login\r\n     */\r\n    onClickLogin = (e) => {\r\n        e.preventDefault();\r\n\r\n        // extract credentials from state\r\n        const body = {\r\n            username: this.state.username,\r\n            password: this.state.password,\r\n        }\r\n        this.setState({pendingApiCall: true});\r\n\r\n        // send credentials to server\r\n        this.props.login(body)\r\n            .then(response => {\r\n                // set new state and redirect\r\n                this.setState({pendingApiCall: false}, () => {\r\n                    this.props.history.push(\"/\");\r\n                });\r\n            })\r\n            .catch(error => {\r\n                // handle errors in user input\r\n                if (error.response) {\r\n                    this.setState({apiError: error.response.data, pendingApiCall: false});\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Renders login page\r\n     * @returns {JSX.Element} login page\r\n     */\r\n    render() {\r\n        // defines whether submit button is enabled\r\n        let disabledSubmit = false;\r\n        if (this.state.username === \"\" || this.state.password === \"\") {\r\n            disabledSubmit = true;\r\n        }\r\n\r\n        return (\r\n            <form className=\"mx-auto bg-white mt-5 border rounded p-2 p-md-5 container auth-div gray-noise-background mb-3\">\r\n                <h4 className=\"mb-4 font-weight-bold\">Log in</h4>\r\n\r\n                <div className=\"form-group\">\r\n                    <Input label=\"Name\" name=\"username\" placeholder=\"Enter name\"\r\n                           value={this.state.username}\r\n                           onChange={this.onChange}\r\n                           hasError={this.state.apiError.username && true}\r\n                           error={this.state.apiError.username} />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <Input label=\"Password\" name=\"password\" placeholder=\"Enter password\" type=\"password\"\r\n                           value={this.state.password}\r\n                           onChange={this.onChange}\r\n                           hasError={this.state.apiError.password && true}\r\n                           error={this.state.apiError.password}/>\r\n                </div>\r\n\r\n                <ButtonWithProgress\r\n                    className=\"btn btn-primary w-100 my-2\"\r\n                    onClick={(e) => this.onClickLogin(e)}\r\n                    disabled={disabledSubmit || this.state.pendingApiCall}\r\n                    pendingApiCall={this.state.pendingApiCall}\r\n                    hasChildren>\r\n                    <i className=\"fa fa-paper-plane\" /> Log in\r\n                </ButtonWithProgress>\r\n\r\n                <Link to=\"/signup\">Don't have an account? Sign up</Link>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * maps redux state to page props\r\n * @param dispatch redux dispatch\r\n */\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (body) => dispatch(authActions.login(body)),\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(LoginPage);","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport ButtonWithProgress from \"../components/ButtonWithProgress\";\r\nimport * as authActions from \"../store/authActions\";\r\nimport Input from \"../components/Input\";\r\n\r\n/**\r\n * page for user registration\r\n */\r\nclass SignupPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        username: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        passwordRepeat: \"\",\r\n        pendingApiCall: false,\r\n        errors: {},\r\n        passwordRepeatConfirmed: true,\r\n    }\r\n\r\n    /**\r\n     * called when is some text input changed\r\n     * @param event input event\r\n     */\r\n    onChange = (event) => {\r\n        if (event.target.name === \"passwordRepeat\") {\r\n            // for password repeat\r\n            const value = event.target.value;\r\n            // check if passwords are the same\r\n            const passwordRepeatConfirmed = this.state.password === value;\r\n            const errors = {...this.state.errors};\r\n            errors.passwordRepeat = passwordRepeatConfirmed ? \"\" : \"Passwords do not match\";\r\n            this.setState({passwordRepeatConfirmed, errors});\r\n        }\r\n        else if (event.target.name === \"password\") {\r\n            // for password\r\n            const value = event.target.value;\r\n            // check if passwords are the same\r\n            const passwordRepeatConfirmed = this.state.passwordRepeat === value;\r\n            const errors = {...this.state.errors};\r\n            errors.passwordRepeat = passwordRepeatConfirmed ? \"\" : \"Passwords do not match\";\r\n            delete errors[event.target.name];\r\n            this.setState({passwordRepeatConfirmed, errors});\r\n        }\r\n        else {\r\n            // for other fields\r\n            const errors = {...this.state.errors};\r\n            delete errors[event.target.name];\r\n            this.setState({errors});\r\n        }\r\n        // update value\r\n        this.setState({[event.target.name]: event.target.value});\r\n    }\r\n\r\n    /**\r\n     * called when user clicks on sign up button\r\n     */\r\n    onClickSignup = (e) => {\r\n        e.preventDefault();\r\n\r\n        // extract user from state\r\n        const user = {\r\n            username: this.state.username,\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        }\r\n        this.setState({pendingApiCall: true});\r\n\r\n        // send user sing up to server\r\n        this.props.signup(user).then(response => {\r\n            this.setState({pendingApiCall: false}, () => this.props.history.push(\"/\"));\r\n        }).catch(apiError => {\r\n                // react on errors in user input\r\n                let errors = {...this.state.errors};\r\n                if (apiError.response.data && apiError.response.data.validationErrors) {\r\n                    errors = {...apiError.response.data.validationErrors}\r\n                }\r\n\r\n                this.setState({\r\n                    pendingApiCall: false,\r\n                    errors\r\n                })\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * renders singup page\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n        // defines if sing up btn is enabled\r\n        let disabledSubmit = false;\r\n        if (this.state.username === \"\" || this.state.email === \"\" || this.state.password === \"\" || this.state.passwordRepeat === \"\") {\r\n            disabledSubmit = true;\r\n        }\r\n\r\n        // render page\r\n        return (\r\n            <div className=\"mx-auto bg-white mt-5 border rounded p-2 p-md-5 container auth-div gray-noise-background mb-3\">\r\n                <form>\r\n                    <h4 className=\"mb-4 font-weight-bold\">Sign up</h4>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Name\"\r\n                            placeholder=\"Enter name\" name=\"username\" value={this.state.username}\r\n                            onChange={this.onChange}\r\n                            hasError={this.state.errors.username && true}\r\n                            error={this.state.errors.username}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"E-mail\"\r\n                            placeholder=\"Enter e-mail\" name=\"email\" value={this.state.email}\r\n                            onChange={this.onChange}\r\n                            hasError={this.state.errors.email && true}\r\n                            error={this.state.errors.email}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Password\"\r\n                            placeholder=\"Enter password\" name=\"password\" value={this.state.password}\r\n                            onChange={this.onChange} type=\"password\"\r\n                            hasError={this.state.errors.password && true}\r\n                            error={this.state.errors.password}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Confirm Password\"\r\n                            placeholder=\"Enter password again\" name=\"passwordRepeat\" value={this.state.passwordRepeat}\r\n                            onChange={this.onChange} type=\"password\"\r\n                            hasError={this.state.errors.passwordRepeat && true}\r\n                            error={this.state.errors.passwordRepeat}\r\n                        />\r\n                    </div>\r\n\r\n                    <ButtonWithProgress  onClick={(e) => this.onClickSignup(e)}\r\n                                         className=\"btn btn-primary w-100 my-2\"\r\n                                         disabled={this.state.pendingApiCall || !this.state.passwordRepeatConfirmed || disabledSubmit}\r\n                                         pendingApiCall={this.state.pendingApiCall}\r\n                                         hasChildren>\r\n                        <i className=\"fa fa-paper-plane\" /> Sign up\r\n                    </ButtonWithProgress>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * maps redux dispatch to page props\r\n * @param dispatch redux dispatch\r\n */\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signup: (user) => dispatch(authActions.signup(user)),\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(SignupPage);","import * as actions from \"./actionsTypes\";\r\n\r\n// init redux state\r\nconst initialState = {\r\n    id: 0,\r\n    username: \"\",\r\n    email: \"\",\r\n    createdAt: null,\r\n    isTranslator: false,\r\n    isInstitutionOwner: false,\r\n    isAdmin: false,\r\n    isLoggedIn: false,\r\n    token: \"\",\r\n    expiredAt: null,\r\n}\r\n\r\n/**\r\n * merges redux action outcome with current state\r\n * @param state current state\r\n * @param action redux action\r\n */\r\nexport default function authReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case actions.LOGOUT_SUCCESS:\r\n            return {...initialState};\r\n        case actions.LOGIN_SUCCESS:\r\n            return {\r\n                ...action.payload,\r\n            }\r\n        case actions.SET_USERNAME:\r\n            return {\r\n                ...state,\r\n                username: action.payload,\r\n            }\r\n        case actions.SET_EMAIL:\r\n            return {\r\n                ...state,\r\n                email: action.payload,\r\n            }\r\n        case actions.SET_IS_INSTITUTION_OWNER:\r\n            return {\r\n                ...state,\r\n                isInstitutionOwner: action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {createStore, applyMiddleware, compose} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport authReducer from \"./authReducer\";\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport * as authActions from \"./authActions\";\r\n\r\nlet localStorageData = localStorage.getItem(\"user\");\r\n\r\n// init redux state\r\nlet initState = {\r\n    id: 0,\r\n    username: \"\",\r\n    email: \"\",\r\n    createdAt: null,\r\n    isTranslator: false,\r\n    isInstitutionOwner: false,\r\n    isAdmin: false,\r\n    isLoggedIn: false,\r\n    token: \"\",\r\n    expiredAt: null,\r\n}\r\nlet persistedState = initState;\r\nlet validToken = false;\r\n\r\nif (localStorageData) {\r\n    try {\r\n        // try to parse stored redux state\r\n        persistedState = JSON.parse(localStorageData);\r\n        const currentTime = Date.now() / 1000;\r\n        if (persistedState.expiredAt > currentTime) {\r\n            // if token is not expired use this state\r\n            apiCalls.setAuthorizationHeader(persistedState);\r\n            validToken = true;\r\n        } else {\r\n            // if token is expired reset state to init state\r\n            persistedState = initState;\r\n        }\r\n    } catch (error) {\r\n        console.log(\"Error parsing stored user\");\r\n    }\r\n}\r\n\r\nconst reactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nconst middleware = [thunk];\r\nlet store;\r\n\r\nif (window.navigator.userAgent.includes(\"Chrome\") && reactReduxDevTools) {\r\n    // create store including redux dev tools\r\n    store = createStore(\r\n        authReducer,\r\n        persistedState,\r\n        compose(\r\n            applyMiddleware(...middleware),\r\n            reactReduxDevTools\r\n        )\r\n    );\r\n} else {\r\n    // create store without redux dev tools\r\n    store = createStore(\r\n        authReducer,\r\n        persistedState,\r\n        compose(applyMiddleware(...middleware))\r\n    );\r\n}\r\n\r\n// subscribe to every state change\r\nstore.subscribe(() => {\r\n    const user = store.getState();\r\n    // save redux state\r\n    localStorage.setItem(\"user\", JSON.stringify(user));\r\n    // set new authorization header\r\n    apiCalls.setAuthorizationHeader(user);\r\n\r\n    // get fresh token before current one expire\r\n    setTimeout(() => {\r\n        if (user.id === store.getState().id) {\r\n            store.dispatch(authActions.getFreshToken());\r\n        }\r\n    }, 600000000);\r\n})\r\n\r\n// get fresh token\r\nif (validToken) {\r\n    store.dispatch(authActions.getFreshToken());\r\n}\r\n\r\nexport default store;\r\n","import store from \"../store/store\";\r\nimport * as authActions from \"../store/authActions\";\r\n\r\n/**\r\n * handles errors that were caused by lack of rights\r\n * @param error http error\r\n */\r\nexport default function handleError(error) {\r\n    return new Promise((resolve, reject) => {\r\n        const status = error.response.status;\r\n        if (status === 401 || status === 403) {\r\n            // logout when user is not authorized enough\r\n            store.dispatch(authActions.logout());\r\n        }\r\n        reject(error);\r\n    });\r\n}","import React, {Component} from 'react';\r\nimport Input from \"../components/Input\";\r\nimport * as authActions from \"../store/authActions\";\r\nimport {connect} from \"react-redux\";\r\nimport ButtonWithProgress from \"../components/ButtonWithProgress\";\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\n\r\n/**\r\n * page with user's profile\r\n */\r\nclass ProfilePage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        username: this.props.user.username,\r\n        email: this.props.user.email,\r\n        password: \"\",\r\n        passwordRepeat: \"\",\r\n        passwordRepeatConfirmed: true,\r\n        pendingApiCallUpdateUser: false,\r\n        pendingApiCallUpdatePassword: false,\r\n        userUpdated: false,\r\n        passwordUpdated: false,\r\n        errors: {},\r\n    }\r\n\r\n    /**\r\n     * called when some of the text inputs change value\r\n     * @param event input event\r\n     */\r\n    onChange = (event) => {\r\n        if (event.target.name === \"passwordRepeat\") {\r\n            // for password repeat input\r\n            const value = event.target.value;\r\n            // checks if passwords are the same\r\n            const passwordRepeatConfirmed = this.state.password === value;\r\n            const errors = {...this.state.errors};\r\n            errors.passwordRepeat = passwordRepeatConfirmed ? \"\" : \"Passwords do not match\";\r\n            this.setState({passwordRepeatConfirmed, errors, passwordUpdated: false});\r\n        } else if (event.target.name === \"password\") {\r\n            // for password input\r\n            const value = event.target.value;\r\n            // check if password are the same\r\n            const passwordRepeatConfirmed = this.state.passwordRepeat === value;\r\n            const errors = {...this.state.errors};\r\n            errors.passwordRepeat = passwordRepeatConfirmed ? \"\" : \"Passwords do not match\";\r\n            delete errors[event.target.name];\r\n            // update password confirmed value and errors\r\n            this.setState({passwordRepeatConfirmed, errors, passwordUpdated: false});\r\n        } else {\r\n            // for other fields\r\n            const errors = {...this.state.errors};\r\n            delete errors[event.target.name];\r\n            this.setState({errors, userUpdated: false});\r\n        }\r\n        // change value for input\r\n        this.setState({[event.target.name]: event.target.value});\r\n    }\r\n\r\n    /**\r\n     * handles error from http request\r\n     * @param apiError error\r\n     * @param apiCall api call name\r\n     */\r\n    handleApiError = (apiError, apiCall) => {\r\n        if (apiError.response.data && apiError.response.data.validationErrors) {\r\n            let errors = {\r\n                ...this.state.errors,\r\n                ...apiError.response.data.validationErrors\r\n            };\r\n            // set new errors and set api call to false\r\n            this.setState({\r\n                [apiCall]: false,\r\n                errors\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * called when user submit user info update\r\n     */\r\n    onClickUserUpdate = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.setState({pendingApiCallUpdateUser: true});\r\n        const {username, email} = this.state;\r\n\r\n        // sends updated info to server\r\n        apiCalls.updateUser({username, email}).then(response => {\r\n            this.setState({pendingApiCallUpdateUser: false, userUpdated: true});\r\n            this.props.setUsername(username);\r\n            this.props.setEmail(email);\r\n        }).catch(error => {\r\n            // handles unauthorized state\r\n            return handleError(error);\r\n        }).catch(apiError => {\r\n            // handle errors in input\r\n            this.handleApiError(apiError, \"pendingApiCallUpdateUser\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * called when user submit password update\r\n     */\r\n    onClickPasswordUpdate = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.setState({pendingApiCallUpdatePassword: true});\r\n        const {password} = this.state;\r\n\r\n        // sends new password to server\r\n        apiCalls.updatePassword({password}).then(response => {\r\n            let errors = {...this.state.errors};\r\n            delete errors[\"passwordRepeat\"];\r\n            this.setState({errors, pendingApiCallUpdatePassword: false, passwordUpdated: true, password: \"\", passwordRepeat: \"\"});\r\n        }).catch(error => {\r\n            // handles unauthorized state\r\n            return handleError(error);\r\n        }).catch(apiError => {\r\n            // handle errors in input\r\n            this.handleApiError(apiError, \"pendingApiCallUpdatePassword\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * renders user profile page\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n        const {\r\n            username,\r\n            email,\r\n            password,\r\n            passwordRepeat,\r\n            pendingApiCallUpdateUser,\r\n            pendingApiCallUpdatePassword,\r\n            passwordRepeatConfirmed,\r\n            userUpdated,\r\n            passwordUpdated,\r\n            errors,\r\n        } = this.state;\r\n        const {createdAt} = this.props.user;\r\n\r\n        // render page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded p-md-5 p-2 container gray-noise-background mb-3\">\r\n                <h2 className=\"mb-4 font-weight-bold\">My Profile</h2>\r\n\r\n                <div className=\"mb-4\">\r\n                    <span className=\"font-weight-bold\">Registration date: </span>\r\n                    {new Date(createdAt * 1).toLocaleDateString(\"en-US\")}\r\n                </div>\r\n\r\n                <form className=\"mb-4\">\r\n                    {\r\n                        userUpdated &&\r\n                        <div className=\"alert alert-success\" role=\"alert\">\r\n                            Personal information has been updated\r\n                        </div>\r\n                    }\r\n\r\n                    <div className=\"form-group\">\r\n                        <Input label=\"Name\" name=\"username\"\r\n                               value={username}\r\n                               onChange={this.onChange} hasError={errors.username && true}\r\n                               error={errors.username}/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <Input label=\"E-mail\" name=\"email\"\r\n                               value={email}\r\n                               onChange={this.onChange} hasError={errors.email && true}\r\n                               error={errors.email}/>\r\n                    </div>\r\n\r\n                    <ButtonWithProgress onClick={(e) => this.onClickUserUpdate(e)}\r\n                                        className=\"btn btn-primary w-100 my-2\"\r\n                                        disabled={pendingApiCallUpdateUser || username === \"\" || email === \"\"}\r\n                                        pendingApiCall={pendingApiCallUpdateUser}\r\n                                        hasChildren>\r\n                        <i className=\"fa fa-paper-plane\" /> Update information\r\n                    </ButtonWithProgress>\r\n                </form>\r\n\r\n                <form>\r\n                    {\r\n                        passwordUpdated &&\r\n                        <div className=\"alert alert-success\" role=\"alert\">\r\n                            Password ha been updated\r\n                        </div>\r\n                    }\r\n\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Password\"\r\n                            placeholder=\"Enter password\" name=\"password\" value={password}\r\n                            onChange={this.onChange} type=\"password\"\r\n                            hasError={errors.password && true}\r\n                            error={errors.password}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Confirm Password\"\r\n                            placeholder=\"Enter password again\" name=\"passwordRepeat\" value={passwordRepeat}\r\n                            onChange={this.onChange} type=\"password\"\r\n                            hasError={errors.passwordRepeat && true}\r\n                            error={errors.passwordRepeat}\r\n                        />\r\n                    </div>\r\n\r\n                    <ButtonWithProgress onClick={(e) => this.onClickPasswordUpdate(e)}\r\n                                        className=\"btn btn-primary w-100 my-2\"\r\n                                        disabled={pendingApiCallUpdatePassword || !passwordRepeatConfirmed || password === \"\" || passwordRepeat === \"\"}\r\n                                        pendingApiCall={pendingApiCallUpdatePassword}\r\n                                        hasChildren>\r\n                        <i className=\"fa fa-paper-plane\" /> Change password\r\n                    </ButtonWithProgress>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * map redux state to page props\r\n * @param state redux state\r\n */\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state,\r\n    };\r\n}\r\n\r\n/**\r\n * map redux dispatch to props\r\n * @param dispatch redux dispatch\r\n */\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setUsername: (username) => dispatch(authActions.setUsername(username)),\r\n        setEmail: (email) => dispatch(authActions.setEmail(email))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfilePage);","import React from 'react';\r\n\r\n/**\r\n * spinner used for showing loading\r\n */\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"d-flex\">\r\n            <div className=\"spinner-border text-black-50 m-auto\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;","import React, {Component} from 'react';\r\nimport Input from \"../components/Input\";\r\nimport ButtonWithProgress from \"../components/ButtonWithProgress\";\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport * as authActions from \"../store/authActions\";\r\nimport {connect} from \"react-redux\";\r\n\r\n/**\r\n * page for creating new institution\r\n */\r\nclass CreateInstitutionPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        name: \"\",\r\n        address: \"\",\r\n        latitudeString: \"\",\r\n        longitudeString: \"\",\r\n        encodedImage: null,\r\n        imageSelect: \"\",\r\n        pendingApiCall: false,\r\n        errors: {},\r\n    }\r\n\r\n    /**\r\n     * called when text input is changed\r\n     * @param event input event\r\n     */\r\n    onChange = (event) => {\r\n        // delete errors for given input\r\n        const errors = {...this.state.errors};\r\n        delete errors[event.target.name];\r\n        // update state\r\n        this.setState({errors, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    /**\r\n     * called when new image is selected\r\n     * @param event input event\r\n     */\r\n    onImageSelect = (event) => {\r\n        // update state with no errors and new value\r\n        const errors = {...this.state.errors};\r\n        delete errors[\"encodedImage\"];\r\n        this.setState({errors, [event.target.name]: event.target.value});\r\n        if (event.target.files.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // if file is picked load it\r\n        const file = event.target.files[0];\r\n        let reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            // set base64 encoded image to state\r\n            this.setState({encodedImage: reader.result});\r\n        }\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    /**\r\n     * clears image\r\n     */\r\n    clearImage = () => {\r\n        const errors = {...this.state.errors};\r\n        delete errors[\"encodedImage\"];\r\n        // set state with no errors for img input and reset image properties\r\n        this.setState({errors, encodedImage: null, imageSelect: \"\",});\r\n    }\r\n\r\n    /**\r\n     * called when user click on create institution button\r\n     */\r\n    onClickCreate = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.setState({pendingApiCall: true});\r\n        // extract institution from state\r\n        const institution = {\r\n            name: this.state.name,\r\n            address: this.state.address,\r\n            latitudeString: this.state.latitudeString,\r\n            longitudeString: this.state.longitudeString,\r\n            encodedImage: this.state.encodedImage,\r\n        }\r\n\r\n        // send new institution to server\r\n        apiCalls.saveMyInstitution(institution).then(response => {\r\n            this.setState({pendingApiCall: false}, () => {\r\n                // set that logged in user is isntituiton owner and redirect\r\n                this.props.setIsInstitutionOwner(true);\r\n                this.props.redirect(\"/myInstitution/addLanguages\");\r\n            });\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        }).catch(apiError => {\r\n            // handle state when user input contains errors\r\n            let errors = {...this.state.errors};\r\n            if (apiError.response.data && apiError.response.data.validationErrors) {\r\n                errors = {...apiError.response.data.validationErrors}\r\n            }\r\n            // set new state with fetched errors\r\n            this.setState({pendingApiCall: false, errors});\r\n        });\r\n    }\r\n\r\n    /**\r\n     * renders create institution page\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n        // determines if submit button is enabled\r\n        let disabledSubmit = false;\r\n        if (this.state.name === \"\" || this.state.address === \"\" || this.state.latitudeString === \"\" || this.state.longitudeString === \"\") {\r\n            disabledSubmit = true;\r\n        }\r\n\r\n        // renders page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                <form>\r\n                    <h2 className=\"mb-4 font-weight-bold\">Create Institution</h2>\r\n\r\n                    <div className=\"form-group\">\r\n                        <Input type=\"file\"\r\n                               onlyImage\r\n                               value={this.state.imageSelect}\r\n                               name=\"imageSelect\"\r\n                               label=\"Institution image\"\r\n                               placeholder=\"Select institution image\"\r\n                               onChange={this.onImageSelect}\r\n                               hasError={this.state.errors.encodedImage && true}\r\n                               error={this.state.errors.encodedImage}\r\n                        />\r\n\r\n                        {\r\n                            this.state.encodedImage &&\r\n                            <div>\r\n                                <img className=\"img-fluid sizedImg img-thumbnail mt-2\" src={this.state.encodedImage} alt=\"upload\" />\r\n                                <br />\r\n                                <button className=\"btn btn-danger btn-lg mt-2\" onClick={this.clearImage}>\r\n                                    <i className=\"fa fa-times\" /> Clear\r\n                                </button>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Name\"\r\n                            placeholder=\"Enter name\" name=\"name\" value={this.state.name}\r\n                            onChange={this.onChange}\r\n                            hasError={this.state.errors.name && true}\r\n                            error={this.state.errors.name}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Address\"\r\n                            placeholder=\"Enter address\" name=\"address\" value={this.state.address}\r\n                            onChange={this.onChange}\r\n                            hasError={this.state.errors.address && true}\r\n                            error={this.state.errors.address}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Latitude\"\r\n                            placeholder=\"Enter latitude\" name=\"latitudeString\" value={this.state.latitudeString}\r\n                            onChange={this.onChange}\r\n                            hasError={this.state.errors.latitudeString && true}\r\n                            error={this.state.errors.latitudeString}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Longitude\"\r\n                            placeholder=\"Enter longitude\" name=\"longitudeString\" value={this.state.longitudeString}\r\n                            onChange={this.onChange}\r\n                            hasError={this.state.errors.longitudeString && true}\r\n                            error={this.state.errors.longitudeString}\r\n                        />\r\n                    </div>\r\n\r\n                    <ButtonWithProgress  onClick={(e) => this.onClickCreate(e)}\r\n                                         className=\"btn btn-primary w-100 my-2\"\r\n                                         disabled={this.state.pendingApiCall || disabledSubmit}\r\n                                         pendingApiCall={this.state.pendingApiCall}\r\n                                         hasChildren>\r\n                        <i className=\"fa fa-paper-plane\" /> Create institution\r\n                    </ButtonWithProgress>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * maps redux state to page properties\r\n * @param dispatch redux dispatch\r\n */\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setIsInstitutionOwner: value => dispatch(authActions.setIsInstitutionOwner(value)),\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(CreateInstitutionPage);","/**\r\n * institution images url\r\n */\r\nexport const INSTITUTIONS_IMAGES_URL = \"http://localhost:8080/institutions_images/\";\r\n/**\r\n * exhibits images url\r\n */\r\nexport const EXHIBITS_IMAGES_URL = \"http://localhost:8080/exhibits_images/\";\r\n/**\r\n * info labels images url\r\n */\r\nexport const INFO_LABELS_IMAGES_URL = \"http://localhost:8080/info_labels_images/\";","import React, {Component} from 'react';\r\nimport * as authActions from \"../store/authActions\";\r\nimport {connect} from \"react-redux\";\r\nimport Input from \"../components/Input\";\r\nimport ButtonWithProgress from \"../components/ButtonWithProgress\";\r\nimport {INSTITUTIONS_IMAGES_URL} from \"../shared/sharedConstants\";\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Link from \"react-router-dom/es/Link\";\r\n\r\n/**\r\n * page for updating institution\r\n */\r\nclass UpdateInstitutionPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        name: this.props.institution.name,\r\n        address: this.props.institution.address,\r\n        latitudeString: this.props.institution.latitude,\r\n        longitudeString: this.props.institution.longitude,\r\n        image: this.props.institution.image,\r\n        encodedImage: null,\r\n        imageSelect: \"\",\r\n        createdAt: this.props.institution.createdAt,\r\n        email: \"\",\r\n        pendingApiCallUpdateInstitution: false,\r\n        pendingApiCallUpdateImage: false,\r\n        pendingApiCallDeleteInstitution: false,\r\n        pendingApiCallAddManager: false,\r\n        institutionUpdated: false,\r\n        imageUpdated: false,\r\n        managerAdded: false,\r\n        errors: {},\r\n    }\r\n\r\n    /**\r\n     * called when new institution image is selected\r\n     * @param event input event\r\n     */\r\n    onImageSelect = (event) => {\r\n        // delete errors and update value in state\r\n        const errors = {...this.state.errors};\r\n        delete errors[\"encodedImage\"];\r\n        this.setState({errors, [event.target.name]: event.target.value, imageUpdated: false});\r\n        if (event.target.files.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // read selected image if exists\r\n        const file = event.target.files[0];\r\n        let reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            // set base64 encoded image to tate\r\n            this.setState({encodedImage: reader.result});\r\n        }\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    /**\r\n     * clear image from state\r\n     */\r\n    clearImage = () => {\r\n        // delete errors and clear image fields from state\r\n        const errors = {...this.state.errors};\r\n        delete errors[\"encodedImage\"];\r\n        this.setState({errors, encodedImage: null, imageSelect: \"\",});\r\n    }\r\n\r\n    /**\r\n     * handles error from http request\r\n     * @param apiError error\r\n     * @param apiCall api call name\r\n     */\r\n    handleApiError = (apiError, apiCall) => {\r\n        if (apiError.response.data && apiError.response.data.validationErrors) {\r\n            let errors = {\r\n                ...this.state.errors,\r\n                ...apiError.response.data.validationErrors\r\n            };\r\n            // update input errors and api call state\r\n            this.setState({\r\n                [apiCall]: false,\r\n                errors\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * called when user submit institution image update\r\n     */\r\n    onClickImageUpdate = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.setState({pendingApiCallUpdateImage: true});\r\n        const img = { encodedImage: this.state.encodedImage }\r\n\r\n        // send request to update image to server\r\n        apiCalls.updateInstitutionImage(img).then(response => {\r\n            this.setState({pendingApiCallUpdateImage: false, image: response.data.message, imageUpdated: true}, () => {\r\n                this.clearImage();\r\n            });\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        }).catch(apiError => {\r\n            // handle errors in input\r\n            this.handleApiError(apiError, \"pendingApiCallUpdateImage\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * called when value in text inputs is changed\r\n     * @param event input event\r\n     */\r\n    onChange = event => {\r\n        // delete errors and update value in state\r\n        const errors = {...this.state.errors};\r\n        delete errors[event.target.name];\r\n        this.setState({errors, institutionUpdated: false, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    /**\r\n     * called when value of email text box is changed\r\n     * @param event input event\r\n     */\r\n    onEmailChange = event => {\r\n        // delete errors and set value to state\r\n        const errors = {...this.state.errors};\r\n        delete errors[event.target.name];\r\n        this.setState({errors, managerAdded: false, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    /**\r\n     * called when institution manager wants to update info about institution\r\n     */\r\n    onClickInstitutionUpdate = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.setState({pendingApiCallUpdateInstitution: true});\r\n        // extract institution from state\r\n        const institution = {\r\n            name: this.state.name,\r\n            address: this.state.address,\r\n            latitudeString: this.state.latitudeString,\r\n            longitudeString: this.state.longitudeString,\r\n        }\r\n\r\n        // sends request to server to update institution information\r\n        apiCalls.updateInstitution(institution).then(response => {\r\n            this.setState({pendingApiCallUpdateInstitution: false, institutionUpdated: true});\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        }).catch(apiError => {\r\n            // handle input error\r\n            this.handleApiError(apiError, \"pendingApiCallUpdateInstitution\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * called when manager of institution wants to delete it\r\n     */\r\n    onClickInstitutionDelete = () => {\r\n        // ask before institution delete\r\n        if (window.confirm(\"Do you really want to delete your institution?\")) {\r\n            this.setState({pendingApiCallDeleteInstitution: true});\r\n\r\n            // send request to institution delete to server\r\n            apiCalls.deleteInstitution().then(response => {\r\n                this.setState({pendingApiCallDeleteInstitution: false}, () => {\r\n                    this.props.setIsInstitutionOwner(false);\r\n                    this.props.redirect(\"/\");\r\n                });\r\n            }).catch(error => {\r\n                // handle unauthorized state\r\n                return handleError(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * called when institution manager wants to add new manager\r\n     */\r\n    onClickManagerAdd = (e) => {\r\n        e.preventDefault();\r\n\r\n        // ask before adding manager\r\n        if (window.confirm(\"Do you really want to add a new manager to your institution?\")) {\r\n            this.setState({pendingApiCallAddManager: true});\r\n\r\n            // send request to server to add new manager to institution\r\n            apiCalls.addInstitutionManager({email: this.state.email}).then(response => {\r\n                this.setState({pendingApiCallAddManager: false, email: \"\"}, () => this.setState({managerAdded: true}));\r\n            }).catch(error => {\r\n                // handle unauthorized state\r\n                return handleError(error);\r\n            }).catch(apiError => {\r\n                // handle input errors\r\n                this.handleApiError(apiError, \"pendingApiCallAddManager\");\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * renders institution update page\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n        const {\r\n            name,\r\n            address,\r\n            latitudeString,\r\n            longitudeString,\r\n            image,\r\n            encodedImage,\r\n            imageSelect,\r\n            createdAt,\r\n            email,\r\n            pendingApiCallUpdateInstitution,\r\n            pendingApiCallUpdateImage,\r\n            pendingApiCallDeleteInstitution,\r\n            pendingApiCallAddManager,\r\n            institutionUpdated,\r\n            imageUpdated,\r\n            managerAdded,\r\n            errors,\r\n        } = this.state;\r\n\r\n        // render page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded p-md-5 p-2 container gray-noise-background mb-3\">\r\n                <h2 className=\"mb-4 font-weight-bold\">My Institution</h2>\r\n\r\n                <div className=\"mb-4\">\r\n                    <span className=\"font-weight-bold\">Registration date: </span>\r\n                    {new Date(createdAt).toLocaleDateString(\"en-US\")}\r\n                </div>\r\n\r\n                <form className=\"mb-4\">\r\n                    {\r\n                        imageUpdated &&\r\n                        <div className=\"alert alert-success\" role=\"alert\">\r\n                            Institution image updated\r\n                        </div>\r\n                    }\r\n\r\n                    <div className=\"form-group\">\r\n                        <Input type=\"file\"\r\n                               onlyImage\r\n                               value={imageSelect}\r\n                               name=\"imageSelect\"\r\n                               label=\"Institution image\"\r\n                               placeholder=\"Select institution image\"\r\n                               onChange={this.onImageSelect}\r\n                               hasError={errors.encodedImage && true}\r\n                               error={errors.encodedImage}\r\n                        />\r\n\r\n                        {\r\n                            encodedImage ?\r\n                                <div>\r\n                                    <img className=\"img-fluid sizedImg img-thumbnail mt-2\" src={encodedImage} alt=\"upload\" />\r\n                                    <br />\r\n                                    <button className=\"btn btn-danger btn-lg mt-2\" disabled={pendingApiCallUpdateImage} onClick={this.clearImage}>\r\n                                        <i className=\"fa fa-times\" /> Clear\r\n                                    </button>\r\n                                    <ButtonWithProgress onClick={(e) => this.onClickImageUpdate(e)}\r\n                                                        className=\"btn btn-success btn-lg ml-2 mt-2\"\r\n                                                        disabled={pendingApiCallUpdateImage}\r\n                                                        pendingApiCall={pendingApiCallUpdateImage}\r\n                                                        hasChildren>\r\n                                        <i className=\"fa fa-paper-plane\" /> Update image\r\n                                    </ButtonWithProgress>\r\n                                </div>\r\n                                :\r\n                                <div>\r\n                                    <img className=\"img-fluid sizedImg img-thumbnail mt-2\" src={INSTITUTIONS_IMAGES_URL + image} alt=\"upload\" />\r\n                                </div>\r\n                        }\r\n                    </div>\r\n                </form>\r\n\r\n                <form>\r\n                    {\r\n                        institutionUpdated &&\r\n                        <div className=\"alert alert-success\" role=\"alert\">\r\n                            Institution information updated\r\n                        </div>\r\n                    }\r\n\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Name\"\r\n                            placeholder=\"Enter name\" name=\"name\" value={name}\r\n                            onChange={this.onChange}\r\n                            hasError={errors.name && true}\r\n                            error={errors.name}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Address\"\r\n                            placeholder=\"Enter address\" name=\"address\" value={address}\r\n                            onChange={this.onChange}\r\n                            hasError={errors.address && true}\r\n                            error={errors.address}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Latitude\"\r\n                            placeholder=\"Enter latitude\" name=\"latitudeString\" value={latitudeString}\r\n                            onChange={this.onChange}\r\n                            hasError={errors.latitudeString && true}\r\n                            error={errors.latitudeString}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Longitude\"\r\n                            placeholder=\"Enter longitude\" name=\"longitudeString\" value={longitudeString}\r\n                            onChange={this.onChange}\r\n                            hasError={errors.longitudeString && true}\r\n                            error={errors.longitudeString}\r\n                        />\r\n                    </div>\r\n\r\n                    <ButtonWithProgress  onClick={(e) => this.onClickInstitutionUpdate(e)}\r\n                                         className=\"btn btn-primary w-100 my-2\"\r\n                                         disabled={pendingApiCallUpdateInstitution || name === \"\" || address === \"\" || latitudeString === \"\" || longitudeString === \"\"}\r\n                                         pendingApiCall={pendingApiCallUpdateInstitution}\r\n                                         hasChildren>\r\n                        <i className=\"fa fa-paper-plane\" /> Update institution information\r\n                    </ButtonWithProgress>\r\n\r\n                </form>\r\n\r\n\r\n                <Link exact to=\"/myInstitution/addLanguages\" >\r\n                    <button type=\"button\" className=\"btn btn-lg mt-3 btn-success\">\r\n                        <i className=\"fa fa-plus-circle\" /> Add languages\r\n                    </button>\r\n                </Link>\r\n\r\n                <br />\r\n                <Link exact to=\"/myInstitution/addExhibit\" >\r\n                    <button type=\"button\" className=\"btn btn-lg mt-3 btn-success\">\r\n                        <i className=\"fa fa-plus-circle\" /> Add exhibit\r\n                    </button>\r\n                </Link>\r\n\r\n                <br />\r\n                <Link exact to=\"/myInstitution/exhibits\" >\r\n                    <button type=\"button\" className=\"btn btn-lg mt-3 btn-info\">\r\n                        <i className=\"fa fa-bars\" /> View exhibits\r\n                    </button>\r\n                </Link>\r\n\r\n                <form className=\"mt-4\">\r\n                    {\r\n                        managerAdded &&\r\n                        <div className=\"alert alert-success\" role=\"alert\">\r\n                            New manager added\r\n                        </div>\r\n                    }\r\n\r\n                    <Input\r\n                        label=\"Add new institution manager\"\r\n                        placeholder=\"Enter new manager's email\" name=\"email\" value={email}\r\n                        onChange={this.onEmailChange}\r\n                        hasError={errors.email && true}\r\n                        error={errors.email}\r\n                    />\r\n\r\n                    <ButtonWithProgress  onClick={(e) => this.onClickManagerAdd(e)}\r\n                                         className=\"btn btn-primary w-100 my-2\"\r\n                                         disabled={pendingApiCallAddManager || email === \"\"}\r\n                                         pendingApiCall={pendingApiCallAddManager}\r\n                                         hasChildren>\r\n                        <i className=\"fa fa-paper-plane\" /> Add new institution manager\r\n                    </ButtonWithProgress>\r\n                </form>\r\n\r\n                <br />\r\n                <ButtonWithProgress  onClick={this.onClickInstitutionDelete}\r\n                                     className=\"btn btn-lg mt-3 btn-danger\"\r\n                                     disabled={pendingApiCallDeleteInstitution}\r\n                                     pendingApiCall={pendingApiCallDeleteInstitution}\r\n                                     hasChildren>\r\n                    <i className=\"fa fa-times\" /> Delete institution\r\n                </ButtonWithProgress>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * maps redux dispatch to state props\r\n * @param dispatch redux dispatch\r\n */\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setIsInstitutionOwner: (value) => dispatch(authActions.setIsInstitutionOwner(value)),\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(UpdateInstitutionPage);","import React, {Component} from 'react';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport CreateInstitutionPage from \"./CreateInstitutionPage\";\r\nimport UpdateInstitutionPage from \"./UpdateInstitutionPage\";\r\n\r\n/**\r\n * Info page of instituion that is managed by logged in user\r\n */\r\nclass MyInstitutionPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        institution: {},\r\n        pendingApiCall: false,\r\n        isOwner: false,\r\n    };\r\n\r\n    /**\r\n     * Called when page is mounted\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCall: true})\r\n        // fetch institution info from server\r\n        apiCalls.getMyInstitution().then(response => {\r\n            this.setState({institution: response.data, pendingApiCall: false, isOwner: true});\r\n        }).catch(error => {\r\n            // handles unauthorized state\r\n            return handleError(error);\r\n        }).catch(error => {\r\n            // handles errors\r\n            if (error.response.data && error.response.data.message === \"User does not own an institution\") {\r\n                this.setState({pendingApiCall: false, isOwner: false});\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * utility for react browser redirecting\r\n     * @param path path to redirect\r\n     */\r\n    redirect = (path) => {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    /**\r\n     * renders user's institution page\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n        const {pendingApiCall, institution, isOwner} = this.state;\r\n\r\n        // if fetching from server is processing show spinner\r\n        if(pendingApiCall) {\r\n            return (\r\n                <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2\">\r\n                    <Spinner/>\r\n                </div>\r\n            );\r\n        }\r\n        else if(isOwner) {\r\n            // if user is owner of an institution show update page\r\n            return (\r\n                <UpdateInstitutionPage institution={institution} redirect={this.redirect} />\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                // if user does not own institution show create page\r\n                <CreateInstitutionPage redirect={this.redirect} />\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default MyInstitutionPage;","import React, {Component} from 'react';\r\nimport Spinner from \"../components/Spinner\";\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport ButtonWithProgress from \"../components/ButtonWithProgress\";\r\n\r\n/**\r\n * Page for adding languages to institution\r\n */\r\nclass AddLanguagesPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        pendingApiCallDownloadLanguages: false,\r\n        possible: [],\r\n        chosen: [],\r\n        filtered: [],\r\n        search: \"\",\r\n    }\r\n\r\n    /**\r\n     * called when page is mounted\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCallDownloadLanguages: true})\r\n        // load languages\r\n        apiCalls.getMyInstitutionLanguages().then(response => {\r\n            let possible = response.data.possibleLanguages;\r\n            for (let possibleLan of possible) {\r\n                possibleLan.pendingApiCall = false;\r\n            }\r\n\r\n            // set fetched languages to state\r\n            const chosen = response.data.chosenLanguages;\r\n            this.setState({possible, chosen, pendingApiCallDownloadLanguages: false});\r\n        }).catch(error => {\r\n            // react on unauthorized state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called when search box value is changed\r\n     * @param event input event\r\n     */\r\n    onSearchChange = (event) => {\r\n        const value = event.target.value;\r\n        if(value === \"\") {\r\n            // no languages visible if box is empty\r\n            this.setState({[event.target.name]: value, filtered: []});\r\n        }\r\n        else {\r\n            // filter languages by value in box\r\n            const filtered = this.state.possible.filter(lan => lan.name.toLowerCase().includes(value.toLowerCase()));\r\n            this.setState({[event.target.name]: value, filtered});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when new language should be added\r\n     * @param lan added language\r\n     */\r\n    onLanguageAddClick = (lan) => {\r\n        // set pending api call for added language\r\n        let newFiltered = [];\r\n        const {filtered} = this.state;\r\n        for (let fil of filtered) {\r\n            if(fil === lan) {\r\n                newFiltered.push({...fil, pendingApiCall: true,});\r\n            }\r\n            else {\r\n                newFiltered.push({...fil});\r\n            }\r\n        }\r\n        this.setState({filtered: newFiltered});\r\n\r\n        // send added language to server\r\n        apiCalls.addInstitutionLanguage(lan.languageId).then(response => {\r\n            // remove language from possible and put it in chosen\r\n            newFiltered = [...filtered];\r\n            newFiltered = newFiltered.filter(fil => lan !== fil);\r\n            let newPossible = [...this.state.possible];\r\n            newPossible = newPossible.filter(pos => lan !== pos);\r\n            let newChosen = [...this.state.chosen];\r\n            newChosen.push({...lan});\r\n\r\n            // update state\r\n            this.setState({filtered: newFiltered, possible: newPossible, chosen: newChosen});\r\n        }).catch(error => {\r\n            // handle authentication error\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * renders add language page\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n        const {\r\n            pendingApiCallDownloadLanguages,\r\n            chosen,\r\n            filtered,\r\n            search,\r\n        } = this.state;\r\n\r\n        // if languages are loading show spinner\r\n        if (pendingApiCallDownloadLanguages) {\r\n            return (\r\n                <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                    <Spinner />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        // render page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                <h2 className=\"mb-5 font-weight-bold\">Add Languages</h2>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6 px-md-5\">\r\n                        <div className=\"input-group mb-4\">\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Search language\" name=\"search\" value={search} onChange={this.onSearchChange} />\r\n                            <div className=\"input-group-append\">\r\n                                <span className=\"input-group-text\">\r\n                                    <i className=\"fa fa-search\" />\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            {\r\n                                filtered.map(lan =>\r\n                                    <ButtonWithProgress  key={lan.languageId}\r\n                                                         onClick={() => this.onLanguageAddClick(lan)}\r\n                                                         className=\"btn btn-success w-100 my-1\"\r\n                                                         disabled={lan.pendingApiCall}\r\n                                                         pendingApiCall={lan.pendingApiCall}\r\n                                                         hasChildren >\r\n                                        <i className=\"fa fa-plus-circle\" /> {lan.name}\r\n                                    </ButtonWithProgress>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-6 px-md-5\">\r\n                        {\r\n                            chosen.length === 0 ?\r\n                                <h4>No selected languages</h4>\r\n                                :\r\n                                <div className=\"card mt-md-0 mt-2\">\r\n                                    <ul className=\"list-group list-group-flush\">\r\n                                        { chosen.map(lan =>\r\n                                            <li key={lan.languageId} className=\"list-group-item\">{lan.name}</li>\r\n                                        )}\r\n                                    </ul>\r\n                                </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddLanguagesPage;","import React, {Component} from 'react';\r\nimport {CKEditor} from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Input from \"../components/Input\";\r\nimport ButtonWithProgress from \"../components/ButtonWithProgress\";\r\n\r\n/**\r\n * Page where institution manager can add new exhibits\r\n */\r\nclass AddExhibitPage extends Component {\r\n\r\n    /**\r\n     * initial state of page\r\n     */\r\n    initState = {\r\n        name: \"\",\r\n        infoLabelText: \"\",\r\n        building: \"\",\r\n        room: \"\",\r\n        showcase: \"\",\r\n        encodedImage: null,\r\n        imageSelect: \"\",\r\n        encodedInfoLabel: null,\r\n        infoLabelSelect: \"\",\r\n        pendingApiCall: false,\r\n        created: false,\r\n        errors: {},\r\n    }\r\n\r\n    /**\r\n     * page state\r\n     */\r\n    state = this.initState;\r\n\r\n    /**\r\n     * Called on text input values change\r\n     * @param event input event\r\n     */\r\n    onChange = (event) => {\r\n        // delete error to given field\r\n        const errors = {...this.state.errors};\r\n        delete errors[event.target.name];\r\n        // update state\r\n        this.setState({errors, [event.target.name]: event.target.value, created: false});\r\n    }\r\n\r\n    /**\r\n     * Called when new image is selected\r\n     * @param event input event\r\n     */\r\n    onImageSelect = (event) => {\r\n        const errors = {...this.state.errors};\r\n        const name = event.target.name;\r\n\r\n        // delete input error message\r\n        if(name === \"imageSelect\") {\r\n            delete errors[\"encodedImage\"];\r\n        }\r\n        else {\r\n            delete errors[\"encodedInfoLabel\"];\r\n        }\r\n\r\n        // update state with new errors and close alert that new exhibit was created\r\n        this.setState({errors, [name]: event.target.value, created: false});\r\n        if (event.target.files.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // if user chose file\r\n        const file = event.target.files[0];\r\n        let reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            // update state with new base64 encoded selected image\r\n            if(name === \"imageSelect\") {\r\n                this.setState({encodedImage: reader.result});\r\n            }\r\n            else {\r\n                this.setState({encodedInfoLabel: reader.result});\r\n            }\r\n        }\r\n        // read image\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    /**\r\n     * Clears image from state\r\n     * @param name img name\r\n     */\r\n    clearImage = (name) => {\r\n        const errors = {...this.state.errors};\r\n        if(name === \"imageSelect\") {\r\n            // delete errors of image input and its fields in state\r\n            delete errors[\"encodedImage\"];\r\n            this.setState({errors, encodedImage: null, imageSelect: \"\",});\r\n        }\r\n        else {\r\n            // delete errors of image input and its fields in state\r\n            delete errors[\"encodedInfoLabel\"];\r\n            this.setState({errors, encodedInfoLabel: null, infoLabelSelect: \"\",});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when info label text is chagned\r\n     * @param event input event\r\n     * @param editor input editor\r\n     */\r\n    onInfoLabelTextChange = (event, editor) => {\r\n        const errors = {...this.state.errors};\r\n        delete errors[\"infoLabelText\"];\r\n        // update state with new value, no errors and closed alert of created exhibit\r\n        this.setState({infoLabelText: editor.getData(), created: false, errors});\r\n    }\r\n\r\n    /**\r\n     * Called when new exhibit is created\r\n     */\r\n    onClickCreate = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.setState({pendingApiCall: true});\r\n        // extract exhibit from state\r\n        const exhibit = {\r\n            name: this.state.name,\r\n            infoLabelText: this.state.infoLabelText,\r\n            building: this.state.building,\r\n            room: this.state.room,\r\n            showcase: this.state.showcase,\r\n            encodedImage: this.state.encodedImage,\r\n            encodedInfoLabel: this.state.encodedInfoLabel,\r\n        }\r\n\r\n        // send new exhibit to server\r\n        apiCalls.addExhibit(exhibit).then(response => {\r\n            this.setState({...this.initState}, () => this.setState({created: true}));\r\n        }).catch(error => {\r\n            // react on unauthorized state\r\n            return handleError(error);\r\n        }).catch(apiError => {\r\n            // react on errors in user input\r\n            let errors = {...this.state.errors};\r\n            if (apiError.response.data && apiError.response.data.validationErrors) {\r\n                errors = {...apiError.response.data.validationErrors}\r\n            }\r\n            this.setState({pendingApiCall: false, errors});\r\n        });\r\n    }\r\n\r\n    /**\r\n     * renders page\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n        const {\r\n            name,\r\n            infoLabelText,\r\n            building,\r\n            room,\r\n            showcase,\r\n            encodedImage,\r\n            imageSelect,\r\n            encodedInfoLabel,\r\n            infoLabelSelect,\r\n            pendingApiCall,\r\n            created,\r\n            errors,\r\n        } = this.state;\r\n\r\n        // define disable submit value\r\n        let disabledSubmit = false;\r\n        if (name === \"\" || encodedInfoLabel === null) {\r\n            disabledSubmit = true;\r\n        }\r\n\r\n        // return page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                <form>\r\n                    <h2 className=\"mb-4 font-weight-bold\">Create Exhibit</h2>\r\n\r\n                    {\r\n                        created &&\r\n                        <div className=\"alert alert-success\" role=\"alert\">\r\n                            Exhibit has been created\r\n                        </div>\r\n                    }\r\n\r\n                    <div className=\"form-group\">\r\n                        <Input type=\"file\"\r\n                               onlyImage\r\n                               value={imageSelect}\r\n                               name=\"imageSelect\"\r\n                               label=\"Exhibit image\"\r\n                               placeholder=\"Select exhibit image\"\r\n                               onChange={this.onImageSelect}\r\n                               hasError={errors.encodedImage && true}\r\n                               error={errors.encodedImage}\r\n                        />\r\n\r\n                        {\r\n                            encodedImage &&\r\n                            <div>\r\n                                <img className=\"img-fluid sizedImg img-thumbnail mt-2\" src={encodedImage} alt=\"upload\" />\r\n                                <br />\r\n                                <button className=\"btn btn-danger btn-lg mt-2\" onClick={() => this.clearImage(\"imageSelect\")}>\r\n                                    <i className=\"fa fa-times\" /> Clear\r\n                                </button>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input type=\"file\"\r\n                               onlyImage\r\n                               value={infoLabelSelect}\r\n                               name=\"infoLabelSelect\"\r\n                               label=\"Information label\"\r\n                               placeholder=\"Select information label\"\r\n                               onChange={this.onImageSelect}\r\n                               hasError={errors.encodedInfoLabel && true}\r\n                               error={errors.encodedInfoLabel}\r\n                        />\r\n\r\n                        {\r\n                            encodedInfoLabel &&\r\n                            <div>\r\n                                <img className=\"img-fluid mt-2\" src={encodedInfoLabel} alt=\"upload\" />\r\n                                <br />\r\n                                <button className=\"btn btn-danger btn-lg mt-2\" onClick={() => this.clearImage(\"infoLabelSelect\")}>\r\n                                    <i className=\"fa fa-times\" /> Clear\r\n                                </button>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Name\"\r\n                            placeholder=\"Enter name\" name=\"name\" value={name}\r\n                            onChange={this.onChange}\r\n                            hasError={errors.name && true}\r\n                            error={errors.name}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Information label text</label>\r\n                        <CKEditor editor={ClassicEditor} data={infoLabelText} onChange={this.onInfoLabelTextChange}/>\r\n                        {\r\n                            errors.infoLabelText &&\r\n                            <div className=\"text-danger\">\r\n                                <small>{errors.infoLabelText}</small>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Building\"\r\n                            placeholder=\"Enter building\" name=\"building\" value={building}\r\n                            onChange={this.onChange}\r\n                            hasError={errors.building && true}\r\n                            error={errors.building}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Room\"\r\n                            placeholder=\"Enter room\" name=\"room\" value={room}\r\n                            onChange={this.onChange}\r\n                            hasError={errors.room && true}\r\n                            error={errors.room}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Input\r\n                            label=\"Show-case\"\r\n                            placeholder=\"Enter show-case\" name=\"showcase\" value={showcase}\r\n                            onChange={this.onChange}\r\n                            hasError={errors.showcase && true}\r\n                            error={errors.showcase}\r\n                        />\r\n                    </div>\r\n\r\n                    <ButtonWithProgress  onClick={(e) => this.onClickCreate(e)}\r\n                                         className=\"btn btn-primary w-100 my-2\"\r\n                                         disabled={pendingApiCall || disabledSubmit}\r\n                                         pendingApiCall={pendingApiCall}\r\n                                         hasChildren>\r\n                        <i className=\"fa fa-paper-plane\" /> Create exhibit\r\n                    </ButtonWithProgress>\r\n\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddExhibitPage;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {EXHIBITS_IMAGES_URL} from \"../shared/sharedConstants\";\r\nimport ButtonWithProgress from \"./ButtonWithProgress\";\r\n\r\n/**\r\n * card for listing exhibit of user's institution\r\n * @param props props\r\n */\r\nconst MyExhibitCard = (props) => (\r\n    <div className=\"card mb-4\">\r\n        <div className=\"card-body\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3\">\r\n                    <img className=\"img-fluid sizedImg img-thumbnail\" src={EXHIBITS_IMAGES_URL + props.image} alt=\"image\" />\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                    <h3 className=\"card-title\">\r\n                        {props.name}\r\n                    </h3>\r\n\r\n                    <div>\r\n                        <span className=\"font-weight-bold\">Registration date: </span>\r\n                        {new Date(props.createdAt).toLocaleDateString(\"en-US\")}\r\n                    </div>\r\n\r\n                    {\r\n                        props.building &&\r\n                        <div>\r\n                            <span className=\"font-weight-bold\">Building: </span>\r\n                            {props.building}\r\n                        </div>\r\n                    }\r\n\r\n                    {\r\n                        props.room &&\r\n                        <div>\r\n                            <span className=\"font-weight-bold\">Room: </span>\r\n                            {props.room}\r\n                        </div>\r\n                    }\r\n\r\n                    {\r\n                        props.showcase &&\r\n                        <div>\r\n                            <span className=\"font-weight-bold\">Show-case: </span>\r\n                            {props.showcase}\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"col-md-3 mt-md-0 mt-3\">\r\n                    <Link exact to={\"/myInstitution/exhibits/\" + props.exhibitId} >\r\n                        <button type=\"button\" className=\"btn btn-info w-100\">\r\n                            <i className=\"fa fa-pencil\" /> Detail\r\n                        </button>\r\n                    </Link>\r\n                    <br />\r\n\r\n                    <button type=\"button\" className=\"btn btn-secondary w-100 mt-2\" onClick={() => props.onClickDownloadQRCode(props.exhibitId)}>\r\n                        <i className=\"fa fa-qrcode\" /> QR Code\r\n                    </button>\r\n                    <br />\r\n\r\n                    <ButtonWithProgress  onClick={() => props.onClickDelete(props.exhibitId)}\r\n                                         className=\"btn btn-danger w-100 mt-2\"\r\n                                         disabled={props.pendingApiCall}\r\n                                         pendingApiCall={props.pendingApiCall}\r\n                                         hasChildren>\r\n                        <i className=\"fa fa-times\" /> Delete\r\n                    </ButtonWithProgress>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default MyExhibitCard;","import React, {Component} from 'react';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport MyExhibitCard from \"../components/MyExhibitCard\";\r\n\r\n/**\r\n * page with all exhibits of an institution that user is managing\r\n */\r\nclass MyInstitutionExhibitsPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        exhibits: [],\r\n        pendingApiCall: false,\r\n    }\r\n\r\n    /**\r\n     * Called when user wants to delete exhibit\r\n     * @param exhibitId exhibit id\r\n     */\r\n    onClickDelete = (exhibitId) => {\r\n        // ask before delete\r\n        if(window.confirm(\"Do you really want to delete this exhibit?\")) {\r\n            // update api call for given exhibit\r\n            let newExhibits = [];\r\n            const {exhibits} = this.state;\r\n            for (let ex of exhibits) {\r\n                if(ex.exhibitId === exhibitId) {\r\n                    // set api call to true for deleted exhibit\r\n                    newExhibits.push({...ex, pendingApiCall: true});\r\n                }\r\n                else {\r\n                    newExhibits.push({...ex});\r\n                }\r\n            }\r\n            this.setState({exhibits: newExhibits});\r\n\r\n            // send delete message to server\r\n            apiCalls.deleteExhibit(exhibitId).then(response => {\r\n                newExhibits = [...this.state.exhibits];\r\n                newExhibits = newExhibits.filter(ex => ex.exhibitId !== exhibitId);\r\n\r\n                // if delete was successful update state\r\n                this.setState({exhibits: newExhibits});\r\n            }).catch(error => {\r\n                // handle unauthorized error\r\n                return handleError(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * called when page is mounted\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCall: true})\r\n        // fetch all institution exhibits from server\r\n        apiCalls.getAllExhibitsOfMyInstitution().then(response => {\r\n            const exhibits = response.data;\r\n            // set default properties for fetched exhibits\r\n            for(let ex of exhibits) {\r\n                ex.pendingApiCall = false;\r\n                ex.onClickDelete = this.onClickDelete;\r\n            }\r\n            this.setState({exhibits, pendingApiCall: false});\r\n        }).catch(error => {\r\n            // handle unauthorized error\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called when user wants to download QR code for exhibit\r\n     * @param exhibitId\r\n     */\r\n    onClickDownloadQRCode = exhibitId => {\r\n        // download QR code from server\r\n        apiCalls.getQRCode(exhibitId).then(response => {\r\n            // create anchor with given image to start downloading\r\n            let encodedImage = response.data;\r\n            let a = document.createElement(\"a\");\r\n            a.href = \"data:image/png;base64,\" + encodedImage;\r\n            a.download = exhibitId + \".png\";\r\n            a.click();\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Renders page with institution exhibits\r\n     * @returns {JSX.Element} page with institution exhibits\r\n     */\r\n    render() {\r\n\r\n        // maps exhibits to exhibit cards\r\n        const exhibits = this.state.exhibits.map(ex =>\r\n            <MyExhibitCard key={ex.exhibitId} {...ex} onClickDownloadQRCode={this.onClickDownloadQRCode} />\r\n        );\r\n\r\n        // define page content\r\n        let content = <Spinner/>;\r\n        if (!this.state.pendingApiCall) {\r\n            content = this.state.exhibits.length === 0 ? <h4>There are no exhibits</h4> : exhibits;\r\n        }\r\n\r\n        // renders page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                <h2 className=\"mb-5 font-weight-bold\">Institution Exhibits</h2>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyInstitutionExhibitsPage;","import React, {Component} from 'react';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport Input from \"../components/Input\";\r\nimport ButtonWithProgress from \"../components/ButtonWithProgress\";\r\nimport {EXHIBITS_IMAGES_URL, INFO_LABELS_IMAGES_URL} from \"../shared/sharedConstants\";\r\nimport {CKEditor} from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\n\r\n/**\r\n * page for updating exhibit\r\n */\r\nclass UpdateExhibitPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        exhibitId: 0,\r\n        name: \"\",\r\n        infoLabelText: \"\",\r\n        building: \"\",\r\n        room: \"\",\r\n        showcase: \"\",\r\n        createdAt: \"\",\r\n        image: \"\",\r\n        encodedImage: null,\r\n        imageSelect: \"\",\r\n        infoLabel: null,\r\n        encodedInfoLabel: null,\r\n        infoLabelSelect: \"\",\r\n        pendingApiCallGetInstitution: false,\r\n        pendingApiCallUpdateInstitution: false,\r\n        pendingApiCallUpdateImage: false,\r\n        pendingApiCallUpdateInfoLabel: false,\r\n        exhibitUpdated: false,\r\n        imageUpdated: false,\r\n        infoLabelUpdated: false,\r\n        errors: {},\r\n    }\r\n\r\n    /**\r\n     * called when page is mounted\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCallGetInstitution: true})\r\n        // get exhibit info from server\r\n        apiCalls.getExhibit(this.props.match.params.exhibitId).then(response => {\r\n            this.setState({...response.data, pendingApiCallGetInstitution: false});\r\n        }).catch(error => {\r\n            // handle unauthenticated state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * called when image is selected\r\n     * @param event input event\r\n     * @param encoded encoded image prop name\r\n     * @param updated updated prop name\r\n     */\r\n    onImageSelect = (event, encoded, updated) => {\r\n        const errors = {...this.state.errors};\r\n        delete errors[encoded];\r\n        // update value in state and remove errors\r\n        this.setState({errors, [event.target.name]: event.target.value, [updated]: false});\r\n        if (event.target.files.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const file = event.target.files[0];\r\n        let reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            // set base64 encoded image to state\r\n            this.setState({[encoded]: reader.result});\r\n        }\r\n        // read image\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    /**\r\n     * clears image from state\r\n     * @param encode encoded image prop name\r\n     * @param select select image prop name\r\n     */\r\n    clearImage = (encode, select) => {\r\n        const errors = {...this.state.errors};\r\n        delete errors[encode];\r\n        // clear image fields and delete errors\r\n        this.setState({errors, [encode]: null, [select]: \"\"});\r\n    }\r\n\r\n    /**\r\n     * called when user submit exhibit image to be updated\r\n     */\r\n    onClickImageUpdate = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.setState({pendingApiCallUpdateImage: true});\r\n        const img = { encodedImage: this.state.encodedImage }\r\n\r\n        // send request to server to update exhibit image\r\n        apiCalls.updateExhibitImage(this.state.exhibitId, img).then(response => {\r\n            this.setState({pendingApiCallUpdateImage: false, image: response.data.message, imageUpdated: true}, () => {\r\n                this.clearImage(\"encodedImage\", \"imageSelect\");\r\n            });\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        }).catch(apiError => {\r\n            // handle user input errors\r\n            this.handleApiError(apiError, \"pendingApiCallUpdateImage\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handles error from http requests\r\n     * @param apiError error from request\r\n     * @param apiCall name of api call\r\n     */\r\n    handleApiError = (apiError, apiCall) => {\r\n        if (apiError.response.data && apiError.response.data.validationErrors) {\r\n            // define new page errors\r\n            let errors = {\r\n                ...this.state.errors,\r\n                ...apiError.response.data.validationErrors\r\n            };\r\n            // set errors in state\r\n            this.setState({\r\n                [apiCall]: false,\r\n                errors\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * called when user submits new exhibit info label image\r\n     */\r\n    onClickInfoImageUpdate = () => {\r\n        this.setState({pendingApiCallUpdateInfoLabel: true});\r\n        const img = { encodedImage: this.state.encodedInfoLabel }\r\n\r\n        // send updated info label to server\r\n        apiCalls.updateExhibitInfoLabelImage(this.state.exhibitId, img).then(response => {\r\n            this.setState({pendingApiCallUpdateInfoLabel: false, infoLabel: response.data.message, infoLabelUpdated: true}, () => {\r\n                this.clearImage(\"encodedInfoLabel\", \"infoLabelSelect\");\r\n            });\r\n        }).catch(error => {\r\n            // handles unauthorized state\r\n            return handleError(error);\r\n        }).catch(apiError => {\r\n            // handle error from user input\r\n            if (apiError.response.data && apiError.response.data.validationErrors) {\r\n                let errors = {\r\n                    ...this.state.errors,\r\n                };\r\n                errors.encodedInfoLabel = apiError.response.data.validationErrors.encodedImage;\r\n                this.setState({pendingApiCallUpdateInfoLabel: false, errors});\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * called when text input is changed\r\n     * @param event input event\r\n     */\r\n    onChange = (event) => {\r\n        // set deleted errors and set value\r\n        const errors = {...this.state.errors};\r\n        delete errors[event.target.name];\r\n        this.setState({errors, [event.target.name]: event.target.value, exhibitUpdated: false});\r\n    }\r\n\r\n    /**\r\n     * called when value in info text editor is changed\r\n     * @param event input event\r\n     * @param editor ck editor\r\n     */\r\n    onInfoLabelTextChange = (event, editor) => {\r\n        // change value and delete errors\r\n        const errors = {...this.state.errors};\r\n        delete errors[\"infoLabelText\"];\r\n        this.setState({infoLabelText: editor.getData(), exhibitUpdated: false, errors});\r\n    }\r\n\r\n    /**\r\n     * called when user wants to update info abou exhibit\r\n     */\r\n    onClickExhibitUpdate = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.setState({pendingApiCallUpdateInstitution: true});\r\n        // extract exhibit from state\r\n        const exhibit = {\r\n            name: this.state.name,\r\n            infoLabelText: this.state.infoLabelText,\r\n            building: this.state.building,\r\n            room: this.state.room,\r\n            showcase: this.state.showcase,\r\n        }\r\n\r\n        // send update exhibit request to server\r\n        apiCalls.updateExhibit(this.state.exhibitId, exhibit).then(response => {\r\n            this.setState({exhibitUpdated: true, pendingApiCallUpdateInstitution: false});\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        }).catch(apiError => {\r\n            // handle error in user input\r\n            this.handleApiError(apiError, \"pendingApiCallUpdateInstitution\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * renders exhibit update page\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n        const {\r\n            name,\r\n            infoLabelText,\r\n            building,\r\n            room,\r\n            showcase,\r\n            image,\r\n            encodedImage,\r\n            imageSelect,\r\n            infoLabel,\r\n            encodedInfoLabel,\r\n            infoLabelSelect,\r\n            pendingApiCallGetInstitution,\r\n            pendingApiCallUpdateInstitution,\r\n            pendingApiCallUpdateImage,\r\n            pendingApiCallUpdateInfoLabel,\r\n            exhibitUpdated,\r\n            imageUpdated,\r\n            infoLabelUpdated,\r\n            errors,\r\n        } = this.state;\r\n\r\n        // define content\r\n        let content = <Spinner />;\r\n        if(!pendingApiCallGetInstitution) {\r\n            content = (\r\n                <div>\r\n                    <form className=\"mb-4\">\r\n                        {\r\n                            imageUpdated &&\r\n                            <div className=\"alert alert-success\" role=\"alert\">\r\n                                Exhibit image updated\r\n                            </div>\r\n                        }\r\n\r\n                        <div className=\"form-group\">\r\n                            <Input type=\"file\"\r\n                                   onlyImage\r\n                                   value={imageSelect}\r\n                                   name=\"imageSelect\"\r\n                                   label=\"Exhibit image\"\r\n                                   placeholder=\"Select exhibit image\"\r\n                                   onChange={(event) => this.onImageSelect(event, \"encodedImage\", \"imageUpdated\")}\r\n                                   hasError={errors.encodedImage && true}\r\n                                   error={errors.encodedImage}\r\n                            />\r\n\r\n                            {\r\n                                encodedImage ?\r\n                                    <div>\r\n                                        <img className=\"img-fluid sizedImg img-thumbnail mt-2\" src={encodedImage} alt=\"upload\" />\r\n                                        <br />\r\n                                        <button className=\"btn btn-danger btn-lg mt-2\" disabled={pendingApiCallUpdateImage} onClick={() => this.clearImage(\"encodedImage\", \"imageSelect\")}>\r\n                                            <i className=\"fa fa-times\" /> Clear\r\n                                        </button>\r\n                                        <ButtonWithProgress onClick={(e) => this.onClickImageUpdate(e)}\r\n                                                            className=\"btn btn-success btn-lg ml-2 mt-2\"\r\n                                                            disabled={pendingApiCallUpdateImage}\r\n                                                            pendingApiCall={pendingApiCallUpdateImage}\r\n                                                            hasChildren>\r\n                                            <i className=\"fa fa-paper-plane\" /> Update image\r\n                                        </ButtonWithProgress>\r\n                                    </div>\r\n                                    :\r\n                                    <div>\r\n                                        <img className=\"img-fluid sizedImg img-thumbnail mt-2\" src={EXHIBITS_IMAGES_URL + image} alt=\"upload\" />\r\n                                    </div>\r\n                            }\r\n                        </div>\r\n                    </form>\r\n\r\n                    <form className=\"mb-4\">\r\n                        {\r\n                            infoLabelUpdated &&\r\n                            <div className=\"alert alert-success\" role=\"alert\">\r\n                                Information label image updated\r\n                            </div>\r\n                        }\r\n\r\n                        <div className=\"form-group\">\r\n                            <Input type=\"file\"\r\n                                   onlyImage\r\n                                   value={infoLabelSelect}\r\n                                   name=\"infoLabelSelect\"\r\n                                   label=\"Information label image\"\r\n                                   placeholder=\"Select information label image\"\r\n                                   onChange={(event) => this.onImageSelect(event, \"encodedInfoLabel\", \"infoLabelUpdated\")}\r\n                                   hasError={errors.encodedInfoLabel && true}\r\n                                   error={errors.encodedInfoLabel}\r\n                            />\r\n\r\n                            {\r\n                                encodedInfoLabel ?\r\n                                    <div>\r\n                                        <img className=\"img-fluid mt-2\" src={encodedInfoLabel} alt=\"upload\" />\r\n                                        <br />\r\n                                        <button className=\"btn btn-danger btn-lg mt-2\" disabled={pendingApiCallUpdateInfoLabel} onClick={() => this.clearImage(\"encodedInfoLabel\", \"infoLabelSelect\")}>\r\n                                            <i className=\"fa fa-times\" /> Clear\r\n                                        </button>\r\n                                        <ButtonWithProgress onClick={(event) => {event.preventDefault(); this.onClickInfoImageUpdate();}}\r\n                                                            className=\"btn btn-success btn-lg ml-2 mt-2\"\r\n                                                            disabled={pendingApiCallUpdateImage}\r\n                                                            pendingApiCall={pendingApiCallUpdateImage}\r\n                                                            hasChildren>\r\n                                            <i className=\"fa fa-paper-plane\" /> Update information label image\r\n                                        </ButtonWithProgress>\r\n                                    </div>\r\n                                    :\r\n                                    <div>\r\n                                        <img className=\"img-fluid mt-2\" src={INFO_LABELS_IMAGES_URL + infoLabel} alt=\"upload\" />\r\n                                    </div>\r\n                            }\r\n                        </div>\r\n                    </form>\r\n\r\n                    <form className=\"mb-4\">\r\n                        {\r\n                            exhibitUpdated &&\r\n                            <div className=\"alert alert-success\" role=\"alert\">\r\n                                Exhibit information updated\r\n                            </div>\r\n                        }\r\n\r\n                        <div className=\"form-group\">\r\n                            <Input\r\n                                label=\"Name\"\r\n                                placeholder=\"Enter name\" name=\"name\" value={name}\r\n                                onChange={this.onChange}\r\n                                hasError={errors.name && true}\r\n                                error={errors.name}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Information label text</label>\r\n                            <CKEditor editor={ClassicEditor} data={infoLabelText} onChange={this.onInfoLabelTextChange}/>\r\n                            {\r\n                                errors.infoLabelText &&\r\n                                <div className=\"text-danger\">\r\n                                    <small>{errors.infoLabelText}</small>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <Input\r\n                                label=\"Building\"\r\n                                placeholder=\"Enter building\" name=\"building\" value={building}\r\n                                onChange={this.onChange}\r\n                                hasError={errors.building && true}\r\n                                error={errors.building}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <Input\r\n                                label=\"Room\"\r\n                                placeholder=\"Enter room\" name=\"room\" value={room}\r\n                                onChange={this.onChange}\r\n                                hasError={errors.room && true}\r\n                                error={errors.room}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <Input\r\n                                label=\"Show-case\"\r\n                                placeholder=\"Enter show-case\" name=\"showcase\" value={showcase}\r\n                                onChange={this.onChange}\r\n                                hasError={errors.showcase && true}\r\n                                error={errors.showcase}\r\n                            />\r\n                        </div>\r\n\r\n                        <ButtonWithProgress  onClick={(e) => this.onClickExhibitUpdate(e)}\r\n                                             className=\"btn btn-primary w-100 my-2\"\r\n                                             disabled={pendingApiCallUpdateInstitution || name === \"\"}\r\n                                             pendingApiCall={pendingApiCallUpdateInstitution}\r\n                                             hasChildren>\r\n                            <i className=\"fa fa-paper-plane\" /> Update exhibit\r\n                        </ButtonWithProgress>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        // render page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded p-md-5 p-2 container gray-noise-background mb-3\">\r\n                <h2 className=\"mb-4 font-weight-bold\">Exhibit</h2>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UpdateExhibitPage;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {INSTITUTIONS_IMAGES_URL} from \"../shared/sharedConstants\";\r\n\r\n/**\r\n * card for listing institutions\r\n * @param props props\r\n */\r\nconst InstitutinCard = (props) => (\r\n    <div className=\"card mb-4\">\r\n        <div className=\"card-body\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3\">\r\n                    <img className=\"img-fluid sizedImg img-thumbnail\" src={INSTITUTIONS_IMAGES_URL + props.image} alt=\"image\" />\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                    <h3 className=\"card-title mt-3 mt-md-0\">\r\n                        {props.name}\r\n                    </h3>\r\n\r\n                    <div>\r\n                        <span className=\"font-weight-bold\">Address: </span>\r\n                        {props.address}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-md-3\">\r\n                    <Link exact to={\"/institutions/\" + props.institutionId}>\r\n                        <button type=\"button\" className=\"btn btn-info btn-lg w-100 mt-3 mt-md-0\">\r\n                            <i className=\"fa fa-bars\" /> Exhibits\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default InstitutinCard;","import React, {Component} from 'react';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport InstitutionCard from \"../components/InstitutionCard\";\r\n\r\n/**\r\n * page of all registered institutions for translators to choose\r\n */\r\nclass TranslateInstitutionsPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        institutions: [],\r\n        pendingApiCall: false,\r\n    }\r\n\r\n    /**\r\n     * called when page is moutned\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCall: true})\r\n        // fetch institutions from the server\r\n        apiCalls.getAllInstitutions().then(response => {\r\n            this.setState({institutions: response.data, pendingApiCall: false});\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * renders institutions page\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n\r\n        // map institutions to institution cards\r\n        const institutions = this.state.institutions.map(i =>\r\n            <InstitutionCard key={i.institutionId} {...i} />\r\n        );\r\n\r\n        // define content\r\n        let content = <Spinner/>;\r\n        if (!this.state.pendingApiCall) {\r\n            content = this.state.institutions.length === 0 ? <h4>There are no institutions</h4> : institutions;\r\n        }\r\n\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                <h2 className=\"mb-5 font-weight-bold\">Institutions</h2>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TranslateInstitutionsPage;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {EXHIBITS_IMAGES_URL} from \"../shared/sharedConstants\";\r\n\r\n/**\r\n * card for listing exhibits for translating\r\n * @param props props\r\n */\r\nconst TranslateExhibitCard = (props) => (\r\n    <div className=\"card mb-4\">\r\n        <div className=\"card-body\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3\">\r\n                    <img className=\"img-fluid sizedImg img-thumbnail\" src={EXHIBITS_IMAGES_URL + props.image} alt=\"image\" />\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                    <h3 className=\"card-title\">\r\n                        {props.name}\r\n                    </h3>\r\n\r\n                    <div>\r\n                        <select className=\"custom-select custom-select-lg mb-3 mt-2\" onChange={(event) => props.selectLang(props.exhibitId, event.target.value)}>\r\n                            {props.languages.map(lan => <option key={lan.languageId} value={lan.languageId}>{lan.name}</option>)}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-md-3\">\r\n                    <Link exact to={\"/institutions/\" + props.institutionId + \"/translate/\" + props.exhibitId + \"/\" + props.lang}>\r\n                        <button type=\"button\" disabled={props.buttonsDisabled} className=\"btn btn-info btn-lg w-100\">\r\n                            <i className=\"fa fa-globe\" /> Translate\r\n                        </button>\r\n                    </Link>\r\n\r\n                    <Link exact to={\"/institutions/\" + props.institutionId + \"/rate/\" + props.exhibitId + \"/\" + props.lang}>\r\n                        <button type=\"button\" disabled={props.buttonsDisabled} className=\"btn btn-primary mt-3 btn-lg w-100\">\r\n                            <i className=\"fa fa-thumbs-up\" /> Rate\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default TranslateExhibitCard;","import React, {Component} from 'react';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport TranslateExhibitCard from \"../components/TranslateExhibitCard\";\r\n\r\n/**\r\n * page containing exhibits to translate in allowed languages\r\n */\r\nclass TranslateExhibitPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        languages: [],\r\n        exhibits: [],\r\n        pendingApiCall: false,\r\n    }\r\n\r\n    /**\r\n     * called when page is mounted\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCall: true})\r\n        // fetch exhibits and languages from server\r\n        apiCalls.getExhibitsTranslate(this.props.match.params.institutionId).then(response => {\r\n            let languages = response.data.languages;\r\n            languages.unshift({languageId: -1, name: \"Select language\"});\r\n\r\n            // add default props to exhibits\r\n            let exhibits = response.data.exhibits;\r\n            for(let ex of exhibits) {\r\n                ex.buttonsDisabled = true;\r\n                ex.lang = -1;\r\n                ex.selectLang = this.selectLang;\r\n            }\r\n\r\n            this.setState({languages, exhibits, pendingApiCall: false});\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called when user selects language\r\n     * @param exhibitId exhibit id\r\n     * @param languageId language id\r\n     */\r\n    selectLang = (exhibitId, languageId) => {\r\n        let exhibits = [];\r\n        // update selected language for given exhibit in state\r\n        for(let ex of this.state.exhibits) {\r\n            if(ex.exhibitId !== exhibitId) {\r\n                exhibits.push(ex);\r\n            }\r\n            else {\r\n                // change language to value from param\r\n                const buttonsDisabled = languageId === \"-1\";\r\n                exhibits.push({...ex, lang: languageId, buttonsDisabled});\r\n            }\r\n        }\r\n        this.setState({exhibits});\r\n    }\r\n\r\n    /**\r\n     * renders page with exhibits to translate to allowed languages\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n\r\n        // map exhibits to translate exhibits cards\r\n        const exhibits = this.state.exhibits.map(ex =>\r\n            <TranslateExhibitCard key={ex.exhibitId} {...ex} languages={this.state.languages} institutionId={this.props.match.params.institutionId} />\r\n        );\r\n\r\n        // define content\r\n        let content = <Spinner/>;\r\n        if (!this.state.pendingApiCall) {\r\n            content = this.state.exhibits.length === 0 ? <h4>There are no exhibits</h4> : exhibits;\r\n        }\r\n\r\n        // render pge\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                <h2 className=\"mb-5 font-weight-bold\">Exhibits</h2>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TranslateExhibitPage;","import React, {Component} from 'react';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport ButtonWithProgress from \"../components/ButtonWithProgress\";\r\nimport {INFO_LABELS_IMAGES_URL} from \"../shared/sharedConstants\";\r\nimport parse from 'html-react-parser';\r\nimport {CKEditor} from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\n\r\n/**\r\n * page for creating new translations\r\n */\r\nclass NewTranslationPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        institutionId: this.props.match.params.institutionId,\r\n        exhibitId: this.props.match.params.exhibitId,\r\n        languageId: this.props.match.params.languageId,\r\n        exhibitName: \"\",\r\n        languageName: \"\",\r\n        infoLabelText: \"\",\r\n        infoLabel: null,\r\n        text: \"\",\r\n        pendingApiCallGetNewTranslation: false,\r\n        pendingApiCallCreateTranslation: false,\r\n        errors: {},\r\n    }\r\n\r\n    /**\r\n     * called when page is mounted\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCallGetNewTranslation: true})\r\n        // fetch translation details from the server\r\n        apiCalls.getNewTranslation(this.state.exhibitId, this.state.languageId).then(response => {\r\n            // set fetched details to page state\r\n            const {exhibitName, infoLabelText, infoLabel, text, languageName} = response.data;\r\n            this.setState({exhibitName, infoLabelText, infoLabel, text, languageName, pendingApiCallGetNewTranslation: false});\r\n        }).catch(error => {\r\n            // handles unauthorized state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * called when translation is submitted\r\n     */\r\n    onTranslationCreate = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.setState({pendingApiCallCreateTranslation: true});\r\n\r\n        // send translation to server\r\n        apiCalls.saveNewTranslation(this.state.exhibitId, this.state.languageId, {text: this.state.text}).then(response => {\r\n            this.setState({pendingApiCallCreateTranslation: false}, () => this.props.history.push(\"/institutions/\" + this.state.institutionId));\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        }).catch(apiError => {\r\n            // handle errors in user input\r\n            let errors = {...this.state.errors};\r\n            if (apiError.response.data && apiError.response.data.validationErrors) {\r\n                errors = {...apiError.response.data.validationErrors}\r\n            }\r\n            this.setState({pendingApiCallCreateTranslation: false, errors});\r\n        });\r\n    }\r\n\r\n    /**\r\n     * called on value change in text editor\r\n     * @param event event\r\n     * @param editor ck editor\r\n     */\r\n    onTextChange = (event, editor) => {\r\n        // set value from editor to state\r\n        const errors = {...this.state.errors};\r\n        delete errors[\"text\"];\r\n        this.setState({text: editor.getData(), errors});\r\n    }\r\n\r\n    /**\r\n     * render new translation page\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n        const {\r\n            exhibitName,\r\n            languageName,\r\n            infoLabelText,\r\n            infoLabel,\r\n            text,\r\n            pendingApiCallGetNewTranslation,\r\n            pendingApiCallCreateTranslation,\r\n            errors,\r\n        } = this.state;\r\n\r\n        // return spinner if api call is processing\r\n        if (pendingApiCallGetNewTranslation) {\r\n            return (\r\n                <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                    <Spinner />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        // render page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                <h2 className=\"mb-5 font-weight-bold\">New Translation</h2>\r\n\r\n                <h3>{exhibitName}</h3>\r\n                <div className=\"mb-4\">\r\n                    <span className=\"font-weight-bold\">Selected language: </span>\r\n                    {languageName}\r\n                </div>\r\n\r\n                <div>\r\n                    <img className=\"img-fluid mt-2\" src={INFO_LABELS_IMAGES_URL + infoLabel} alt=\"information label image\" />\r\n                </div>\r\n\r\n                {\r\n                    (infoLabelText !== \"\") &&\r\n                    <div className=\"mt-4 bg-light border rounded p-2\">\r\n                        {parse(infoLabelText)}\r\n                    </div>\r\n                }\r\n\r\n                <form className=\"mt-4\">\r\n                    <div className=\"form-group\">\r\n                        <label>Translated text</label>\r\n                        <CKEditor editor={ClassicEditor} data={text} onChange={this.onTextChange}/>\r\n                        {\r\n                            errors.text &&\r\n                            <div className=\"text-danger\">\r\n                                <small>{errors.text}</small>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n\r\n                    <ButtonWithProgress  onClick={(e) => this.onTranslationCreate(e)}\r\n                                         className=\"btn btn-primary w-100 my-2\"\r\n                                         disabled={pendingApiCallCreateTranslation || text === \"\"}\r\n                                         pendingApiCall={pendingApiCallCreateTranslation}\r\n                                         hasChildren>\r\n                        <i className=\"fa fa-paper-plane\" /> Create translation\r\n                    </ButtonWithProgress>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewTranslationPage;","import React from 'react';\r\nimport parse from \"html-react-parser\";\r\n\r\n/**\r\n * card for listing translations to rate\r\n * @param props props\r\n */\r\nconst TranslatorRateTranslationCard = (props) => {\r\n    let cardStyle = \"card mb-4\"\r\n    if(props.isOfficial) {\r\n        cardStyle += \" bg-warning\";\r\n    }\r\n\r\n    let btnClass = \"btn btn-primary\";\r\n    if(!props.liked) {\r\n        btnClass = \"btn btn-secondary\";\r\n    }\r\n\r\n    return (\r\n        <div className={cardStyle}>\r\n            <div className=\"card-body\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-2\">\r\n                        <h5>\r\n                            {props.authorUsername}\r\n                        </h5>\r\n                        <p>{new Date(props.createdAt).toLocaleDateString(\"en-US\")}</p>\r\n                        {\r\n                            props.isOfficial &&\r\n                            <span className=\"font-weight-bold\">official</span>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"col-md-8\">\r\n                        <div className=\"bg-light border rounded p-2\">\r\n                            {parse(props.translatedText)}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-2\">\r\n                        <div className=\"d-flex justify-content-between mt-md-0 mt-3\">\r\n                            <div className=\"text-info mt-1\">\r\n                                <i className=\"fa fa-thumbs-up\" /> {props.likesCount + \"x\"}\r\n                            </div>\r\n\r\n                            <button onClick={() => props.onLikeChange(props.translationId)} type=\"button\" className={btnClass}>\r\n                                {\r\n                                    props.liked ?\r\n                                        <i className=\"fa fa-thumbs-up\" />\r\n                                        :\r\n                                        <i className=\"fa fa-thumbs-o-up\" />\r\n                                }\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TranslatorRateTranslationCard;","import React, {Component} from 'react';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport {INFO_LABELS_IMAGES_URL} from \"../shared/sharedConstants\";\r\nimport parse from \"html-react-parser\";\r\nimport TranslatorRateTranslationCard from \"../components/TranslatorRateTranslationCard\";\r\n\r\n/**\r\n * page for translators to rate translations of pair exhibit-language\r\n */\r\nclass TranslatorRatePage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        exhibitId: this.props.match.params.exhibitId,\r\n        languageId: this.props.match.params.languageId,\r\n        exhibit: null,\r\n        language: \"\",\r\n        translations: [],\r\n        pendingApiCall: true,\r\n    }\r\n\r\n    /**\r\n     * called when page is mounted\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCall: true})\r\n        // fetch translations from server\r\n        apiCalls.getRateOverview(this.state.exhibitId, this.state.languageId).then(response => {\r\n            this.setState({exhibit: response.data.exhibit, language: response.data.language, translations: response.data.translations, pendingApiCall: false});\r\n        }).catch(error => {\r\n            // handle unauthenticated state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * called when suer likes/unlikes translation\r\n     * @param translationId translation id\r\n     */\r\n    onLikeChange = translationId => {\r\n        let newTranslations = [];\r\n        const {translations} = this.state;\r\n        let newValue;\r\n        for(let t of translations) {\r\n            if(t.translationId !== translationId) {\r\n                newTranslations.push(t);\r\n            }\r\n            else {\r\n                // set new like value\r\n                newValue = !t.liked;\r\n                if(newValue) {\r\n                    // if value is true increase count likes\r\n                    newTranslations.push({...t, liked: newValue, likesCount: t.likesCount + 1})\r\n                }\r\n                else {\r\n                    // if value is negative decrease count likes\r\n                    newTranslations.push({...t, liked: newValue, likesCount: t.likesCount - 1})\r\n                }\r\n            }\r\n        }\r\n        this.setState({translations: newTranslations});\r\n\r\n        // send request to set like/unlike to server\r\n        apiCalls.setLike(translationId, {value: newValue}).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * renders page for translators to rate translations of pair exhibit-language\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n\r\n        // map translations to translation rate cards\r\n        const translations = this.state.translations.map(t =>\r\n            <TranslatorRateTranslationCard key={t.translationId} {...t} onLikeChange={this.onLikeChange}/>\r\n        );\r\n\r\n        // define content\r\n        let content = <Spinner/>;\r\n        if (!this.state.pendingApiCall) {\r\n            const {name, infoLabel, infoLabelText} = this.state.exhibit;\r\n\r\n            content = (\r\n              <div>\r\n                  <h3>{name}</h3>\r\n                  <div className=\"mb-4\">\r\n                      <span className=\"font-weight-bold\">Selected language: </span>\r\n                      {this.state.language}\r\n                  </div>\r\n\r\n                  <div>\r\n                      <img className=\"img-fluid mt-2\" src={INFO_LABELS_IMAGES_URL + infoLabel} alt=\"information label image\" />\r\n                  </div>\r\n\r\n                  {\r\n                      (infoLabelText !== \"\") &&\r\n                      <div className=\"mt-4 bg-light border rounded p-2\">\r\n                          {parse(infoLabelText)}\r\n                      </div>\r\n                  }\r\n\r\n                  {\r\n                      translations.length === 0 ?\r\n                          <h4 className=\"mt-5\">There are no translations</h4>\r\n                          :\r\n                          <div className=\"mt-3\">\r\n                              <h3 className=\"my-5\">Translations</h3>\r\n                              {translations}\r\n                          </div>\r\n                  }\r\n              </div>\r\n            );\r\n        }\r\n\r\n        // render page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                <h2 className=\"mb-5 font-weight-bold\">Rate Translations</h2>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TranslatorRatePage;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {EXHIBITS_IMAGES_URL} from \"../shared/sharedConstants\";\r\n\r\n/**\r\n * card for listing exhibits to approve\r\n * @param props props\r\n */\r\nconst ApproveExhibitCard = (props) => (\r\n    <div className=\"card mb-4\">\r\n        <div className=\"card-body\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3\">\r\n                    <img className=\"img-fluid sizedImg img-thumbnail\" src={EXHIBITS_IMAGES_URL + props.image} alt=\"image\" />\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                    <h3 className=\"card-title\">\r\n                        {props.name}\r\n                    </h3>\r\n\r\n                    <div>\r\n                        <select className=\"custom-select custom-select-lg mb-3 mt-2\" onChange={(event) => props.selectLang(props.exhibitId, event.target.value)}>\r\n                            {props.languages.map(lan => <option key={lan.languageId} value={lan.languageId}>{lan.name}</option>)}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-md-3\">\r\n                    <Link exact to={\"/approve/\" + props.exhibitId + \"/\" + props.lang}>\r\n                        <button type=\"button\" disabled={props.buttonDisabled} className=\"btn btn-primary btn-lg w-100\">\r\n                            <i className=\"fa fa-star\"/> Approve\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default ApproveExhibitCard;","import React, {Component} from 'react';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport ApproveExhibitCard from \"../components/ApproveExhibitCard\";\r\n\r\n/**\r\n * Page for rendering exhibits where official text can be set\r\n */\r\nclass ApproveExhibitPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        languages: [],\r\n        exhibits: [],\r\n        pendingApiCall: false,\r\n    }\r\n\r\n    /**\r\n     * Called when page is mounted\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCall: true})\r\n        // get exhibits to approve from server\r\n        apiCalls.getExhibitsApproveTranslations().then(response => {\r\n            let languages = response.data.languages;\r\n            languages.unshift({languageId: -1, name: \"Select language\"});\r\n\r\n            // set default props to fetched exhibits\r\n            let exhibits = response.data.exhibits;\r\n            for(let ex of exhibits) {\r\n                ex.buttonDisabled = true;\r\n                ex.lang = -1;\r\n                ex.selectLang = this.selectLang;\r\n            }\r\n\r\n            this.setState({languages, exhibits, pendingApiCall: false});\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * called when language is selected\r\n     * @param exhibitId exhibit id\r\n     * @param languageId language id\r\n     */\r\n    selectLang = (exhibitId, languageId) => {\r\n        let exhibits = [];\r\n        for(let ex of this.state.exhibits) {\r\n            if(ex.exhibitId !== exhibitId) {\r\n                exhibits.push(ex);\r\n            }\r\n            else {\r\n                // set language for exhibit\r\n                const buttonDisabled = languageId === \"-1\";\r\n                exhibits.push({...ex, lang: languageId, buttonDisabled});\r\n            }\r\n        }\r\n        // update state\r\n        this.setState({exhibits});\r\n    }\r\n\r\n    /**\r\n     * renders page with exhibits where official text can be set\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n\r\n        // map exhibits to its view cards\r\n        const exhibits = this.state.exhibits.map(ex =>\r\n            <ApproveExhibitCard key={ex.exhibitId} {...ex} languages={this.state.languages} />\r\n        );\r\n\r\n        let content = <Spinner/>;\r\n        if (!this.state.pendingApiCall) {\r\n            // if fetching data ended show fetched exhibits or message that there are none\r\n            content = this.state.exhibits.length === 0 ? <h4>There are no exhibits</h4> : exhibits;\r\n        }\r\n\r\n        // render page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                <h2 className=\"mb-5 font-weight-bold\">Exhibits</h2>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ApproveExhibitPage;","import React from 'react';\r\nimport parse from \"html-react-parser\";\r\nimport ButtonWithProgress from \"./ButtonWithProgress\";\r\n\r\n/**\r\n * card for listing translations to rate and set official\r\n * @param props props\r\n */\r\nconst OwnerRateTranslationCard = (props) => {\r\n    let cardStyle = \"card mb-4\"\r\n    if(props.isOfficial) {\r\n        cardStyle += \" bg-warning\";\r\n    }\r\n\r\n    let likeBtnClass = \"btn btn-primary\";\r\n    if(!props.liked) {\r\n        likeBtnClass = \"btn btn-secondary\";\r\n    }\r\n\r\n    let officialBtnClass = \"btn btn-success w-100 mt-3\";\r\n    if(!props.isOfficial) {\r\n        officialBtnClass = \"btn btn-secondary w-100 mt-3\";\r\n    }\r\n\r\n    return (\r\n        <div className={cardStyle}>\r\n            <div className=\"card-body\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-2\">\r\n                        <h5>\r\n                            {props.authorUsername}\r\n                        </h5>\r\n                        <p>{new Date(props.createdAt).toLocaleDateString(\"en-US\")}</p>\r\n                        {\r\n                            props.isOfficial &&\r\n                            <span className=\"font-weight-bold\">official</span>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"col-md-8\">\r\n                        <div className=\"bg-light border rounded p-2\">\r\n                            {parse(props.translatedText)}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-2 mt-md-0 mt-3\">\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <div className=\"text-info mt-1\">\r\n                                <i className=\"fa fa-thumbs-up\" /> {props.likesCount + \"x\"}\r\n                            </div>\r\n\r\n                            <button onClick={() => props.onLikeChange(props.translationId)} type=\"button\" className={likeBtnClass}>\r\n                                {\r\n                                    props.liked ?\r\n                                        <i className=\"fa fa-thumbs-up\" />\r\n                                        :\r\n                                        <i className=\"fa fa-thumbs-o-up\" />\r\n                                }\r\n                            </button>\r\n                        </div>\r\n\r\n                        <ButtonWithProgress  onClick={() => props.onOfficialChange(props.translationId)}\r\n                                             className={officialBtnClass}\r\n                                             disabled={props.pendingApiCallSetOfficial}\r\n                                             pendingApiCall={props.pendingApiCallSetOfficial}\r\n                                             hasChildren>\r\n                            {\r\n                                props.isOfficial ?\r\n                                    <div><i className=\"fa fa-star\" /> Official </div>\r\n                                    :\r\n                                    <div><i className=\"fa fa-star-o\" /> Official </div>\r\n                            }\r\n                        </ButtonWithProgress>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OwnerRateTranslationCard;","import React, {Component} from 'react';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport {INFO_LABELS_IMAGES_URL} from \"../shared/sharedConstants\";\r\nimport parse from \"html-react-parser\";\r\nimport OwnerRateTranslationCard from \"../components/OwnerRateTranslationCard\";\r\n\r\n/**\r\n * page for institution owner to pick official translation and like translations\r\n */\r\nclass OwnerRatePage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        exhibitId: this.props.match.params.exhibitId,\r\n        languageId: this.props.match.params.languageId,\r\n        exhibit: null,\r\n        language: \"\",\r\n        translations: [],\r\n        pendingApiCall: true,\r\n    }\r\n\r\n    /**\r\n     * called when component is mounted\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCall: true})\r\n        // fetch translation from server\r\n        apiCalls.getRateOverview(this.state.exhibitId, this.state.languageId).then(response => {\r\n            let translations = response.data.translations;\r\n            for(let t of translations) {\r\n                t.pendingApiCallSetOfficial = false;\r\n            }\r\n\r\n            // update page state with fetched translations\r\n            this.setState({exhibit: response.data.exhibit, language: response.data.language, translations, pendingApiCall: false});\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * called when user likes/unlikes translation\r\n     * @param translationId translation id\r\n     */\r\n    onLikeChange = translationId => {\r\n        let newTranslations = [];\r\n        const {translations} = this.state;\r\n        let newValue;\r\n        // set new likes counts and if it is liked for translation that caused the call\r\n        for(let t of translations) {\r\n            if(t.translationId !== translationId) {\r\n                newTranslations.push(t);\r\n            }\r\n            else {\r\n                newValue = !t.liked;\r\n                if(newValue) {\r\n                    newTranslations.push({...t, liked: newValue, likesCount: t.likesCount + 1});\r\n                }\r\n                else {\r\n                    newTranslations.push({...t, liked: newValue, likesCount: t.likesCount - 1});\r\n                }\r\n            }\r\n        }\r\n        // update likes state\r\n        this.setState({translations: newTranslations});\r\n\r\n        // sends request to like/unlike translation to the server\r\n        apiCalls.setLike(translationId, {value: newValue}).catch(error => {\r\n            // handles unauthorized state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * called when official translation is changed\r\n     * @param translationId\r\n     */\r\n    onOfficialChange = translationId => {\r\n        let newTranslations = [];\r\n        const {translations} = this.state;\r\n        let newValue;\r\n        // update pending api call for translation that caused this\r\n        for(let t of translations) {\r\n            if(t.translationId !== translationId) {\r\n                newTranslations.push(t);\r\n            }\r\n            else {\r\n                newValue = !t.isOfficial;\r\n                newTranslations.push({...t, pendingApiCallSetOfficial: true});\r\n            }\r\n        }\r\n        this.setState({translations: newTranslations});\r\n\r\n        // send new value of official translation to server\r\n        apiCalls.setOfficial(translationId, {value: newValue}).then(response => {\r\n            // update official translation view\r\n            newTranslations = [];\r\n            const {translations} = this.state;\r\n            for(let t of translations) {\r\n                if(t.translationId !== translationId) {\r\n                    newTranslations.push({...t, isOfficial: false});\r\n                }\r\n                else {\r\n                    newTranslations.push({...t, pendingApiCallSetOfficial: false, isOfficial: newValue});\r\n                }\r\n            }\r\n            // set new state of official translation\r\n            this.setState({translations: newTranslations});\r\n        })\r\n        .catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * renders owner rate and select official translation page\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n\r\n        // map translations to rate translation cards\r\n        const translations = this.state.translations.map(t =>\r\n            <OwnerRateTranslationCard key={t.translationId} {...t} onLikeChange={this.onLikeChange} onOfficialChange={this.onOfficialChange}/>\r\n        );\r\n\r\n        let content = <Spinner/>;\r\n        // if there is no pending api call print translations\r\n        if (!this.state.pendingApiCall) {\r\n            const {name, infoLabel, infoLabelText} = this.state.exhibit;\r\n\r\n            content = (\r\n                <div>\r\n                    <h3>{name}</h3>\r\n                    <div className=\"mb-4\">\r\n                        <span className=\"font-weight-bold\">Selected language: </span>\r\n                        {this.state.language}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <img className=\"img-fluid mt-2\" src={INFO_LABELS_IMAGES_URL + infoLabel} alt=\"information label image\" />\r\n                    </div>\r\n\r\n                    {\r\n                        (infoLabelText !== \"\") &&\r\n                        <div className=\"mt-4 bg-light border rounded p-2\">\r\n                            {parse(infoLabelText)}\r\n                        </div>\r\n                    }\r\n\r\n                    {\r\n                        translations.length === 0 ?\r\n                            <h4 className=\"mt-5\">There are no translations</h4>\r\n                            :\r\n                            <div className=\"mt-3\">\r\n                                <h3 className=\"my-5\">Translations</h3>\r\n                                {translations}\r\n                            </div>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n\r\n        // render page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                <h2 className=\"mb-5 font-weight-bold\">Approve Translations</h2>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OwnerRatePage;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {EXHIBITS_IMAGES_URL} from \"../shared/sharedConstants\";\r\nimport ButtonWithProgress from \"./ButtonWithProgress\";\r\n\r\n/**\r\n * card for listing user's translation sequences\r\n * @param props props\r\n */\r\nconst MyTranslationSequenceCard = (props) => (\r\n    <div className=\"card mb-4\">\r\n        <div className=\"card-body\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3\">\r\n                    <img className=\"img-fluid sizedImg img-thumbnail\" src={EXHIBITS_IMAGES_URL + props.exhibitImage} alt=\"image\" />\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                    <h3 className=\"card-title\">\r\n                        {props.institutionName}\r\n                    </h3>\r\n\r\n                    <h5>\r\n                        Exhibit: {props.exhibitName}\r\n                    </h5>\r\n\r\n                    <div>\r\n                        <span className=\"font-weight-bold\">Language: </span>\r\n                        {props.language}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <span className=\"font-weight-bold\">Latest activity: </span>\r\n                        {new Date(props.latestTranslationCreatedAt).toLocaleDateString(\"en-US\")}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-md-3 mt-3 mt-md-0\">\r\n                    <Link exact to={\"/myTranslations/\" + props.exhibitId + \"/\" + props.languageId} >\r\n                        <button type=\"button\" className=\"btn btn-info w-100\">\r\n                            <i className=\"fa fa-bars\" /> Open\r\n                        </button>\r\n                    </Link>\r\n                    <br />\r\n\r\n                    <ButtonWithProgress  onClick={() => props.onClickDelete(props.exhibitId, props.languageId)}\r\n                                         className=\"btn btn-danger w-100 mt-2\"\r\n                                         disabled={props.pendingApiCall}\r\n                                         pendingApiCall={props.pendingApiCall}\r\n                                         hasChildren>\r\n                        <i className=\"fa fa-times\" /> Delete\r\n                    </ButtonWithProgress>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default MyTranslationSequenceCard;","import React, {Component} from 'react';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport MyTranslationSequenceCard from \"../components/MyTranslationSequenceCard\";\r\n\r\n/**\r\n * page with translator sequences of translation\r\n */\r\nclass MyTranslationsPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        sequences: [],\r\n        pendingApiCall: false,\r\n    }\r\n\r\n    /**\r\n     * Called when user wants to delete whole sequence\r\n     * @param exhibitId exhibit id\r\n     * @param languageId language id\r\n     */\r\n    onClickDelete = (exhibitId, languageId) => {\r\n        // ask before deleting sequence\r\n        if(window.confirm(\"Do you really want to delete this translation sequence?\")) {\r\n            // start api call for given deleted sequence\r\n            let newSequences = [];\r\n            const {sequences} = this.state;\r\n            for (let s of sequences) {\r\n                if(s.exhibitId === exhibitId && s.languageId === languageId) {\r\n                    // set pending api call to true for sequence that is deleted\r\n                    newSequences.push({...s, pendingApiCall: true});\r\n                }\r\n                else {\r\n                    newSequences.push(s);\r\n                }\r\n            }\r\n            this.setState({sequences: newSequences});\r\n\r\n            // request to server to delete sequence\r\n            apiCalls.deleteSequence(exhibitId, languageId).then(response => {\r\n                newSequences = [...this.state.sequences];\r\n                newSequences = newSequences.filter(s => s.exhibitId !== exhibitId || s.languageId !== languageId);\r\n\r\n                // update state without sequence\r\n                this.setState({sequences: newSequences});\r\n            }).catch(error => {\r\n                // handles unauthorized state\r\n                return handleError(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when pge is mounted\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCall: true})\r\n        // fetch sequences from server\r\n        apiCalls.getMyTranslationSequences().then(response => {\r\n            const sequences = response.data;\r\n            for(let s of sequences) {\r\n                s.pendingApiCall = false;\r\n                s.onClickDelete = this.onClickDelete;\r\n            }\r\n            // update state with fetched sequences\r\n            this.setState({sequences, pendingApiCall: false});\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * renders page with translation sequences\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n\r\n        // map sequences to sequence cards\r\n        const sequences = this.state.sequences.map((s, index) =>\r\n            <MyTranslationSequenceCard key={index} {...s} />\r\n        );\r\n\r\n        // define content\r\n        let content = <Spinner/>;\r\n        if (!this.state.pendingApiCall) {\r\n            content = this.state.sequences.length === 0 ? <h4>There are no translation sequences</h4> : sequences;\r\n        }\r\n\r\n        // render page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                <h2 className=\"mb-5 font-weight-bold\">Translation Sequences</h2>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyTranslationsPage;","import React from 'react';\r\nimport parse from \"html-react-parser\";\r\nimport ButtonWithProgress from \"./ButtonWithProgress\";\r\n\r\n/**\r\n * card for listing sequence translations\r\n * @param props props\r\n */\r\nconst MyTranslationCard = (props) => {\r\n    let cardStyle = \"card mb-4\"\r\n    if(props.isOfficial) {\r\n        cardStyle += \" bg-warning\";\r\n    }\r\n\r\n    return (\r\n        <div className={cardStyle}>\r\n            <div className=\"card-body\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-2\">\r\n                        <h4>\r\n                            {props.order + \".\"}\r\n                        </h4>\r\n                        <p>{new Date(props.createdAt).toLocaleDateString(\"en-US\")}</p>\r\n                        {\r\n                            props.isOfficial &&\r\n                            <span className=\"font-weight-bold\">official</span>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"col-md-8\">\r\n                        <div className=\"bg-light border rounded p-2\">\r\n                            {parse(props.translatedText)}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-2 mt-md-0 mt-2\">\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <div className=\"text-info mt-1\">\r\n                                <i className=\"fa fa-thumbs-up\" /> {props.likesCount + \"x\"}\r\n                            </div>\r\n                        </div>\r\n                        {\r\n                            props.index !== 0 &&\r\n                            <ButtonWithProgress  onClick={() => props.onRollback(props.translationId, props.index)}\r\n                                                 className=\"btn btn-danger w-100 mt-3 mb-2\"\r\n                                                 disabled={props.pendingApiCall}\r\n                                                 pendingApiCall={props.pendingApiCall}\r\n                                                 hasChildren>\r\n                                <i className=\"fa fa-times\" /> Rollback\r\n                            </ButtonWithProgress>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyTranslationCard;","import React, {Component} from 'react';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport MyTranslationCard from \"../components/MyTranslationCard\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n/**\r\n * page showing translations of one translation sequence\r\n */\r\nclass TranslationSequencePage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        exhibitId: this.props.match.params.exhibitId,\r\n        languageId: this.props.match.params.languageId,\r\n        translations: [],\r\n        pendingApiCall: false,\r\n    }\r\n\r\n    /**\r\n     * called when user want to rollback to some point in translation sequence\r\n     * @param translationId translation id\r\n     * @param index index of translation\r\n     */\r\n    onRollback = (translationId, index) => {\r\n        // ask before rollback\r\n        if(window.confirm(\"Do you really want to rollback to this translation?\")) {\r\n            let newTranslations = [...this.state.translations];\r\n            newTranslations[index] = {...newTranslations[index], pendingApiCall: true}\r\n            this.setState({translations: newTranslations});\r\n\r\n            // send request to rollback to server\r\n            apiCalls.rollbackTranslation(translationId).then(response => {\r\n                let newTranslations = [...this.state.translations];\r\n                newTranslations[index] = {...newTranslations[index], pendingApiCall: false}\r\n                newTranslations = newTranslations.slice(index);\r\n                // update state with deleted translations\r\n                this.setState({translations: newTranslations});\r\n            }).catch(error => {\r\n                // handle unauthenticated state\r\n                return handleError(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * called when page is mounted\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCall: true})\r\n        // fetch translations of sequence from server\r\n        apiCalls.getMyTranslationSequence(this.state.exhibitId, this.state.languageId).then(response => {\r\n            const translations = response.data;\r\n            for(let t of translations) {\r\n                t.pendingApiCall = false;\r\n                t.onRollback = this.onRollback;\r\n            }\r\n            // set fetched translations to state\r\n            this.setState({translations, pendingApiCall: false});\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * renders transaltion sequence page\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n        const translationsLength = this.state.translations.length;\r\n\r\n        // map translations to translation cards\r\n        const translations = this.state.translations.map((t, index) =>\r\n            <MyTranslationCard key={index} order={translationsLength - index} index={index} {...t} />\r\n        );\r\n\r\n        // define content\r\n        let content = <Spinner/>;\r\n        if (!this.state.pendingApiCall) {\r\n            content = translationsLength === 0 ?\r\n                <h4>There are no translations</h4>\r\n                :\r\n                <>\r\n                    <Link exact to={\"/institutions/\" + this.state.translations[0].institutionId + \"/translate/\" + this.state.exhibitId + \"/\" + this.state.languageId}>\r\n                        <button type=\"button\" className=\"btn btn-info mb-4 btn-lg\">\r\n                            <i className=\"fa fa-globe\" /> Create New Version\r\n                        </button>\r\n                    </Link>\r\n                    {translations}\r\n                </>\r\n        }\r\n\r\n        // render page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded gray-noise-background container p-md-5 p-2 mb-3\">\r\n                <h2 className=\"mb-5 font-weight-bold\">Translation Sequence</h2>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TranslationSequencePage;","import React from 'react';\r\nimport Link from \"react-router-dom/es/Link\";\r\n\r\n/**\r\n * one row in table representing system user\r\n * @param props props\r\n */\r\nfunction UserManagerRow(props) {\r\n    return (\r\n        <tr>\r\n            <td>{props.username}</td>\r\n            <td>{new Date(props.createdAt).toLocaleDateString(\"en-US\")}</td>\r\n            <td>{props.email}</td>\r\n            <td>\r\n                <Link exact to={\"/users/\" + props.userId}>\r\n                    <button type=\"button\" className=\"btn btn-info w-100\">\r\n                        <i className=\"fa fa-search\" /> Detail\r\n                    </button>\r\n                </Link>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default UserManagerRow;","import React, {Component} from 'react';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport UserManagerRow from \"../components/UserManagerRow\";\r\nimport handleError from \"../shared/failureHandler\";\r\n\r\n/**\r\n * page for managing users\r\n */\r\nclass UserManagerPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        users: [],\r\n        filtered: [],\r\n        pendingApiCall: false,\r\n        search: \"\",\r\n    };\r\n\r\n    /**\r\n     * called when page is mounted\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCall: true})\r\n        // fetch users from server\r\n        apiCalls.getUsers().then(response => {\r\n            this.setState({users: response.data, filtered: response.data, pendingApiCall: false});\r\n        }).catch(error => {\r\n            // handle unauthenticated state\r\n            return handleError(error);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Called when user changes value in search field\r\n     * @param event input event\r\n     */\r\n    onSearchChange = (event) => {\r\n        const value = event.target.value;\r\n        if(this.state.search === \"\") {\r\n            // if search filed is empty show all users\r\n            let filtered = [...this.state.users];\r\n            this.setState({filtered, search: value});\r\n        }\r\n        else {\r\n            // if search field has text filter users\r\n            let filtered = this.state.users.filter(u => u.username.includes(value) || u.email.includes(value));\r\n            this.setState({filtered, search: value});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * renders page for user management\r\n     * @returns {JSX.Element}\r\n     */\r\n    render() {\r\n        const {users, pendingApiCall, search, filtered} = this.state;\r\n\r\n        // define content\r\n        let content = <Spinner/>;\r\n        if (!pendingApiCall) {\r\n            content = users.length === 0 ?\r\n                <h3>There are no users</h3>\r\n                :\r\n                <>\r\n                    <div className=\"input-group mb-3\">\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Search user\" name=\"search\" value={search} onChange={this.onSearchChange} />\r\n                        <div className=\"input-group-append\">\r\n                                <span className=\"input-group-text\">\r\n                                    <i className=\"fa fa-search\" />\r\n                                </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table table-dark table-striped table-bordered table-hover\">\r\n                            <thead className=\"thead-light\">\r\n                            <tr>\r\n                                <th scope=\"col\">Username</th>\r\n                                <th scope=\"col\">Register date</th>\r\n                                <th scope=\"col\">E-mail</th>\r\n                                <th scope=\"col\">Detail</th>\r\n                            </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                            {filtered.map(u => <UserManagerRow {...u} />)}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </>\r\n\r\n        }\r\n\r\n        // render page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded p-md-5 p-2 container gray-noise-background mb-3\">\r\n                <h2 className=\"mb-5\">User Manager</h2>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserManagerPage;","import React, {Component} from 'react';\r\nimport * as apiCalls from \"../apiCalls/apiCalls\";\r\nimport handleError from \"../shared/failureHandler\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport Input from \"../components/Input\";\r\nimport ButtonWithProgress from \"../components/ButtonWithProgress\";\r\n\r\n/**\r\n * page for viewing details about user\r\n */\r\nclass UserDetailPage extends Component {\r\n\r\n    /**\r\n     * current page state\r\n     */\r\n    state = {\r\n        userId: this.props.match.params.userId,\r\n        username: \"\",\r\n        email: \"\",\r\n        createdAt: null,\r\n        isBanned: false,\r\n        isTranslator: true,\r\n        isInstitutionOwner: false,\r\n        institutionName: \"\",\r\n        pendingApiCall: true,\r\n        pendingApiCallUsernameUpdate: false,\r\n        pendingApiCallChangePassword: false,\r\n        pendingApiCallTranslator: false,\r\n        pendingApiCallBan: false,\r\n        pendingApiCallRemoveInstitution: false,\r\n        usernameUpdated: false,\r\n        errors: {},\r\n    }\r\n\r\n    /**\r\n     * called when page is mounted\r\n     */\r\n    componentDidMount() {\r\n        this.setState({pendingApiCall: true})\r\n        // get user details from server\r\n        apiCalls.getUser(this.state.userId).then(response => {\r\n            const {\r\n                username,\r\n                email,\r\n                createdAt,\r\n                isBanned,\r\n                isTranslator,\r\n                isInstitutionOwner,\r\n                institutionName\r\n            } = response.data;\r\n\r\n            this.setState({username, email, createdAt, isBanned, isTranslator, isInstitutionOwner, institutionName, pendingApiCall: false});\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * called when text inputs are changed\r\n     * @param event\r\n     */\r\n    onChange = (event) => {\r\n        // delete errors and set new value\r\n        const errors = {...this.state.errors};\r\n        delete errors[event.target.name];\r\n        this.setState({errors, usernameUpdated: false, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    /**\r\n     * handles error from http request\r\n     * @param apiError error\r\n     * @param apiCall api call name\r\n     */\r\n    handleApiError = (apiError, apiCall) => {\r\n        if (apiError.response.data && apiError.response.data.validationErrors) {\r\n            // add errors\r\n            let errors = {\r\n                ...this.state.errors,\r\n                ...apiError.response.data.validationErrors\r\n            };\r\n            this.setState({\r\n                [apiCall]: false,\r\n                errors\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * called when admin updates username\r\n     */\r\n    onClickUsernameUpdate = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.setState({pendingApiCallUsernameUpdate: true});\r\n\r\n        // send request to server to update username\r\n        apiCalls.adminUpdateUsername(this.state.userId, {username: this.state.username}).then(response => {\r\n            this.setState({pendingApiCallUsernameUpdate: false, usernameUpdated: true});\r\n        }).catch(error => {\r\n            // handle unauthorized state\r\n            return handleError(error);\r\n        }).catch(apiError => {\r\n            // handle input errors\r\n            this.handleApiError(apiError, \"pendingApiCallUsernameUpdate\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * called when admin wants to change user's password by sending it to mail\r\n     */\r\n    onPasswordChange = () => {\r\n        const {username, email} = this.state;\r\n        // ask before changing password\r\n        if(window.confirm(\"Do you really want to generate new password for user \" + username + \" and send it to mail: \" + email)) {\r\n            this.setState({pendingApiCallChangePassword: true});\r\n\r\n            // send request to change password by sending new password to user's mail\r\n            apiCalls.adminChangePassword(this.state.userId).then(response => {\r\n                this.setState({pendingApiCallChangePassword: false});\r\n            }).catch(error => {\r\n                // handle unauthorized state\r\n                return handleError(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * called when admin wants to change user's rights to translate\r\n     */\r\n    onTranslatorChange = () => {\r\n        const {userId, isTranslator} = this.state;\r\n        // ask before changing rights\r\n        if(window.confirm(\"Do you really want to change translator rights?\")) {\r\n            this.setState({pendingApiCallTranslator: true});\r\n\r\n            // send request to server to change user's translator rights\r\n            apiCalls.adminChangeTranslator(userId, {value: !isTranslator}).then(response => {\r\n                this.setState({pendingApiCallTranslator: false, isTranslator: !isTranslator});\r\n            }).catch(error => {\r\n                // handle unauthorized state\r\n                return handleError(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * called when admin wants to change user's ban\r\n     */\r\n    onBanChange = () => {\r\n        const {userId, isBanned} = this.state;\r\n        // ask before changing ban\r\n        if(window.confirm(\"Do you really want to change access rights?\")) {\r\n            this.setState({pendingApiCallBan: true});\r\n\r\n            // send request to change ban of user to server\r\n            apiCalls.adminChangeBan(userId, {value: !isBanned}).then(response => {\r\n                this.setState({pendingApiCallBan: false, isBanned: !isBanned});\r\n            }).catch(error => {\r\n                // handle unauthorized state\r\n                return handleError(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * called when admin wants to remove institution from user\r\n     */\r\n    onInstitutionRemove = () => {\r\n        // ask before removing institution\r\n        const {userId, institutionName} = this.state;\r\n        if(window.confirm(\"Do you really want to remove managerial rights? It may cause deletion of institution: \" + institutionName)) {\r\n            this.setState({pendingApiCallRemoveInstitution: true});\r\n\r\n            // send request to server to remove institution management to server\r\n            apiCalls.adminRemoveInstitution(userId).then(response => {\r\n                this.setState({pendingApiCallRemoveInstitution: false, isInstitutionOwner: false, institutionName: \"\"});\r\n            }).catch(error => {\r\n                return handleError(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * renders user details page\r\n     * @returns {JSX.Element} page\r\n     */\r\n    render() {\r\n        const {\r\n            username,\r\n            email,\r\n            createdAt,\r\n            isBanned,\r\n            isTranslator,\r\n            isInstitutionOwner,\r\n            institutionName,\r\n            pendingApiCall,\r\n            pendingApiCallUsernameUpdate,\r\n            pendingApiCallChangePassword,\r\n            pendingApiCallTranslator,\r\n            pendingApiCallBan,\r\n            pendingApiCallRemoveInstitution,\r\n            usernameUpdated,\r\n            errors\r\n        } = this.state;\r\n\r\n        // define content\r\n        let content = <Spinner/>;\r\n        if (!pendingApiCall) {\r\n            content =\r\n                <div>\r\n                    <div className=\"mb-4\">\r\n                        <span className=\"font-weight-bold\">Registration date: </span>\r\n                        {new Date(createdAt).toLocaleDateString(\"en-US\")}\r\n                    </div>\r\n\r\n                    <form className=\"mb-4\">\r\n                        {\r\n                            usernameUpdated &&\r\n                            <div className=\"alert alert-success\" role=\"alert\">\r\n                                Username updated\r\n                            </div>\r\n                        }\r\n\r\n                        <div className=\"form-group\">\r\n                            <Input\r\n                                label=\"Name\"\r\n                                placeholder=\"Enter name\" name=\"username\" value={username}\r\n                                onChange={this.onChange}\r\n                                hasError={errors.username && true}\r\n                                error={errors.username}\r\n                            />\r\n                        </div>\r\n\r\n                        <ButtonWithProgress  onClick={(e) => this.onClickUsernameUpdate(e)}\r\n                                             className=\"btn btn-primary w-100 my-2\"\r\n                                             disabled={pendingApiCallUsernameUpdate || username === \"\"}\r\n                                             pendingApiCall={pendingApiCallUsernameUpdate}\r\n                                             hasChildren>\r\n                            <i className=\"fa fa-paper-plane\" /> Update username\r\n                        </ButtonWithProgress>\r\n                    </form>\r\n\r\n                    <h5>Password Change</h5>\r\n                    <p>Generate new password and send it to email: <span className=\"font-weight-bold\">{email}</span></p>\r\n                    <ButtonWithProgress  onClick={this.onPasswordChange}\r\n                                         className=\"btn btn-danger btn-lg my-1\"\r\n                                         disabled={pendingApiCallChangePassword}\r\n                                         pendingApiCall={pendingApiCallChangePassword}\r\n                                         hasChildren>\r\n                        <i className=\"fa fa-key\"/> Generate new password\r\n                    </ButtonWithProgress>\r\n\r\n                    <h5 className=\"mt-4\">Translator Rights</h5>\r\n                    <p>Change user's right to translate</p>\r\n                    <ButtonWithProgress  onClick={this.onTranslatorChange}\r\n                                         className={\"btn btn-lg my-1 \" + (isTranslator ? \"btn-primary\" : \"btn-secondary\")}\r\n                                         disabled={pendingApiCallTranslator}\r\n                                         pendingApiCall={pendingApiCallTranslator}\r\n                                         hasChildren>\r\n                        <i className=\"fa fa-globe\"/> {isTranslator ? \"Translator rights on\" : \"Translator rights off\"}\r\n                    </ButtonWithProgress>\r\n\r\n                    {\r\n                        isInstitutionOwner &&\r\n                        <>\r\n                            <h5 className=\"mt-4\">Institution</h5>\r\n                            <p>User is a manager of: <span className=\"font-weight-bold\">{institutionName}</span></p>\r\n                            <ButtonWithProgress  onClick={this.onInstitutionRemove}\r\n                                                 className=\"btn btn-lg my-1 btn-danger\"\r\n                                                 disabled={pendingApiCallRemoveInstitution}\r\n                                                 pendingApiCall={pendingApiCallRemoveInstitution}\r\n                                                 hasChildren>\r\n                                <i className=\"fa fa-times\"/> Remove managerial rights\r\n                            </ButtonWithProgress>\r\n                        </>\r\n                    }\r\n\r\n                    <h5 className=\"mt-4\">Ban</h5>\r\n                    <p>Change user's access to the system</p>\r\n                    <ButtonWithProgress  onClick={this.onBanChange}\r\n                                         className={\"btn btn-lg my-1 \" + (isBanned ? \"btn-danger\" : \"btn-primary\")}\r\n                                         disabled={pendingApiCallBan}\r\n                                         pendingApiCall={pendingApiCallBan}\r\n                                         hasChildren>\r\n                        <i className=\"fa fa-user\"/> {isBanned ? \"Banned\" : \"Access allowed\"}\r\n                    </ButtonWithProgress>\r\n                </div>\r\n        }\r\n\r\n        // render page\r\n        return (\r\n            <div className=\"mx-auto mt-5 border rounded p-md-5 p-2 container gray-noise-background mb-3\">\r\n                <h2 className=\"mb-5\">User Details</h2>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserDetailPage;","import React, {Component} from 'react';\nimport Layout from \"./components/Layout\"\nimport {Route, Switch, Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport HomePage from \"./pages/HomePage\";\nimport LoginPage from \"./pages/LoginPage\";\nimport SignupPage from \"./pages/SignupPage\";\nimport ProfilePage from \"./pages/ProfilePage\";\nimport MyInstitutionPage from \"./pages/MyInstitutionPage\";\nimport AddLanguagesPage from \"./pages/AddLanguagesPage\";\nimport AddExhibitPage from \"./pages/AddExhibitPage\";\nimport MyInstitutionExhibitsPage from \"./pages/MyInstitutionExhibitsPage\";\nimport UpdateExhibitPage from \"./pages/UpdateExhibitPage\";\nimport TranslateInstitutionsPage from \"./pages/TranslateInstitutionsPage\";\nimport TranslateExhibitPage from \"./pages/TranslateExhibitPage\";\nimport NewTranslationPage from \"./pages/NewTranslationPage\";\nimport TranslatorRatePage from \"./pages/TranslatorRatePage\";\nimport ApproveExhibitPage from \"./pages/ApproveExhibitPage\";\nimport OwnerRatePage from \"./pages/OwnerRatePage\";\nimport MyTranslationsPage from \"./pages/MyTranslationsPage\";\nimport TranslationSequencePage from \"./pages/TranslationSequencePage\";\nimport UserManagerPage from \"./pages/UserManagerPage\";\nimport UserDetailPage from \"./pages/UserDetailPage\";\n\n\n/**\n * high level component representing whole app\n */\nclass App extends Component {\n\n  render() {\n    const {user} = this.props;\n\n    // all routes available in app with its authorization\n    let routes = (\n        <Switch>\n          <Route exact path=\"/\" component={HomePage}/>\n          <Route exact path=\"/login\" component={LoginPage}/>\n          <Route exact path=\"/signup\" component={SignupPage}/>\n          {user.isLoggedIn && <Route exact path=\"/profile\" component={ProfilePage} />}\n          {user.isLoggedIn && <Route exact path=\"/myInstitution\" component={MyInstitutionPage} />}\n          {user.isInstitutionOwner && <Route exact path=\"/myInstitution/addLanguages\" component={AddLanguagesPage} />}\n          {user.isInstitutionOwner && <Route exact path=\"/myInstitution/addExhibit\" component={AddExhibitPage} />}\n          {user.isInstitutionOwner && <Route exact path=\"/myInstitution/exhibits\" component={MyInstitutionExhibitsPage} />}\n          {user.isInstitutionOwner && <Route exact path=\"/myInstitution/exhibits/:exhibitId\" component={UpdateExhibitPage} />}\n          {user.isInstitutionOwner && <Route exact path=\"/approve\" component={ApproveExhibitPage} />}\n          {user.isInstitutionOwner && <Route exact path=\"/approve/:exhibitId/:languageId\" component={OwnerRatePage} />}\n          {user.isTranslator && <Route exact path=\"/institutions\" component={TranslateInstitutionsPage} />}\n          {user.isTranslator && <Route exact path=\"/institutions/:institutionId\" component={TranslateExhibitPage} />}\n          {user.isTranslator && <Route exact path=\"/institutions/:institutionId/translate/:exhibitId/:languageId\" component={NewTranslationPage} />}\n          {user.isTranslator && <Route exact path=\"/institutions/:institutionId/rate/:exhibitId/:languageId\" component={TranslatorRatePage} />}\n          {user.isTranslator && <Route exact path=\"/myTranslations\" component={MyTranslationsPage} />}\n          {user.isTranslator && <Route exact path=\"/myTranslations/:exhibitId/:languageId\" component={TranslationSequencePage} />}\n          {user.isAdmin && <Route exact path=\"/users\" component={UserManagerPage} />}\n          {user.isAdmin && <Route exact path=\"/users/:userId\" component={UserDetailPage} />}\n          <Redirect to=\"/\"/>\n        </Switch>\n    );\n\n    // renders app\n    return (\n        <Layout>\n          {routes}\n        </Layout>\n    );\n  }\n}\n\n\n/**\n * maps redux state to props\n * @param state redux state\n */\nconst mapStateToProps = (state) => {\n  return {\n    user: state,\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./store/store\";\nimport {Provider} from \"react-redux\";\n\n/**\n * start point of application, renders web\n */\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}